{"ast":null,"code":"import $59JSH$react, { useCallback as $59JSH$useCallback } from \"react\";\nimport { useId as $59JSH$useId, Box as $59JSH$Box } from \"@contentful/f36-core\";\nimport { TableRow as $59JSH$TableRow, TableCell as $59JSH$TableCell } from \"@contentful/f36-table\";\n\nconst $00f6bdd671a67129$export$cb6ddd830302c2a8 = _ref => {\n  let {\n    numberOfLines = 1,\n    offsetLeft = 0,\n    offsetTop = 0,\n    lineHeight = 21,\n    marginBottom = 20,\n    width: width\n  } = _ref;\n  const getLineWidth = $59JSH$useCallback(lastLine => {\n    if (width) return width;\n    return lastLine ? '80%' : '100%';\n  }, [width]);\n  return /*#__PURE__*/$59JSH$react.createElement($59JSH$react.Fragment, null, Array.from(Array(numberOfLines)).map((_, index) => /*#__PURE__*/$59JSH$react.createElement(\"rect\", {\n    key: `skeleton-display-text-${index}`,\n    x: offsetLeft,\n    y: index * (+lineHeight + +marginBottom) + +offsetTop // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    ,\n    rx: \"0\",\n    ry: \"0\",\n    width: getLineWidth(numberOfLines > 1 && numberOfLines - index === 1 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    ),\n    height: lineHeight\n  })));\n};\n\n$00f6bdd671a67129$export$cb6ddd830302c2a8.displayName = 'SkeletonText';\n\nconst $20cd7b984354214c$export$919fca0c481496d5 = _ref2 => {\n  let {\n    lineHeight = 16,\n    marginBottom = 8,\n    numberOfLines = 2,\n    offsetLeft = 0,\n    offsetTop = 0,\n    ...otherProps\n  } = _ref2;\n  return /*#__PURE__*/$59JSH$react.createElement($00f6bdd671a67129$export$cb6ddd830302c2a8, {\n    lineHeight: lineHeight,\n    marginBottom: marginBottom,\n    numberOfLines: numberOfLines > 0 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    ? numberOfLines : 1,\n    offsetLeft: offsetLeft,\n    offsetTop: offsetTop,\n    ...otherProps\n  });\n};\n\nconst $5ce6df81e0e6093a$export$66b8cea0c448285 = _ref3 => {\n  let {\n    children: children,\n    testId = 'cf-ui-skeleton-form',\n    ariaLabel = 'Loading component...',\n    width = '100%',\n    height = '100%',\n    preserveAspectRatio: preserveAspectRatio,\n    backgroundColor = '#e5ebed',\n    backgroundOpacity = 1,\n    isAnimated = true,\n    speed = 2,\n    foregroundColor = '#f7f9fa',\n    foregroundOpacity = 1,\n    svgWidth = '100%',\n    svgHeight = '100%',\n    clipId: clipId,\n    gradientId: gradientId,\n    animateId: animateId,\n    ...otherProps\n  } = _ref3;\n  const uniqueClipId = $59JSH$useId(clipId, 'cf-ui-skeleton-clip');\n  const uniqueGradientId = $59JSH$useId(gradientId, 'cf-ui-skeleton-clip-gradient');\n  const randomAnimateId = $59JSH$useId(undefined, 'animation');\n  const uniqueAnimateId = animateId || randomAnimateId;\n  return /*#__PURE__*/$59JSH$react.createElement($59JSH$Box, {\n    as: \"svg\",\n    display: \"block\",\n    role: \"img\",\n    \"aria-label\": ariaLabel,\n    preserveAspectRatio: preserveAspectRatio,\n    width: svgWidth,\n    height: svgHeight,\n    testId: testId,\n    ...otherProps\n  }, ariaLabel ? /*#__PURE__*/$59JSH$react.createElement(\"title\", null, ariaLabel) : null, /*#__PURE__*/$59JSH$react.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    width: width,\n    height: height,\n    clipPath: `url(#${uniqueClipId})`,\n    style: {\n      fill: `url(#${uniqueGradientId})`\n    }\n  }), /*#__PURE__*/$59JSH$react.createElement(\"defs\", null, /*#__PURE__*/$59JSH$react.createElement(\"clipPath\", {\n    id: uniqueClipId\n  }, children), /*#__PURE__*/$59JSH$react.createElement(\"linearGradient\", {\n    id: uniqueGradientId\n  }, /*#__PURE__*/$59JSH$react.createElement(\"stop\", {\n    offset: \"0%\",\n    stopColor: backgroundColor,\n    stopOpacity: backgroundOpacity\n  }, isAnimated && /*#__PURE__*/$59JSH$react.createElement(\"animate\", {\n    id: uniqueAnimateId,\n    attributeName: \"stop-color\",\n    values: `${backgroundColor}; ${foregroundColor}; ${backgroundColor}`,\n    dur: `${speed}s`,\n    repeatCount: \"indefinite\"\n  })), /*#__PURE__*/$59JSH$react.createElement(\"stop\", {\n    offset: \"50%\",\n    stopColor: foregroundColor,\n    stopOpacity: foregroundOpacity\n  }, isAnimated && /*#__PURE__*/$59JSH$react.createElement(\"animate\", {\n    attributeName: \"stop-color\",\n    values: `${backgroundColor}; ${foregroundColor}; ${backgroundColor}`,\n    begin: `${uniqueAnimateId}.begin+0.25s`,\n    dur: `${speed}s`,\n    repeatCount: \"indefinite\"\n  })), /*#__PURE__*/$59JSH$react.createElement(\"stop\", {\n    offset: \"100%\",\n    stopColor: backgroundColor,\n    stopOpacity: backgroundOpacity\n  }, isAnimated && /*#__PURE__*/$59JSH$react.createElement(\"animate\", {\n    attributeName: \"stop-color\",\n    begin: `${uniqueAnimateId}.begin+0.5s`,\n    values: `${backgroundColor}; ${foregroundColor}; ${backgroundColor}`,\n    dur: `${speed}s`,\n    repeatCount: \"indefinite\"\n  })))));\n};\n\n$5ce6df81e0e6093a$export$66b8cea0c448285.displayName = 'SkeletonContainer';\n\nconst $8d8b0c86f35f77bf$export$406e2958a1a2b65d = _ref4 => {\n  let {\n    lineHeight = 21,\n    marginBottom = 20,\n    numberOfLines = 1,\n    offsetLeft = 0,\n    offsetTop = 0,\n    width = 100,\n    ...otherProps\n  } = _ref4;\n  return /*#__PURE__*/$59JSH$react.createElement($00f6bdd671a67129$export$cb6ddd830302c2a8, {\n    lineHeight: lineHeight,\n    marginBottom: marginBottom,\n    numberOfLines: numberOfLines,\n    offsetLeft: offsetLeft,\n    offsetTop: offsetTop,\n    width: width,\n    ...otherProps\n  });\n};\n\n$8d8b0c86f35f77bf$export$406e2958a1a2b65d.displayName = 'SkeletonDisplayText';\n\nconst $fb0ca3c3a071df41$export$d72bf888bd1ed2bc = _ref5 => {\n  let {\n    testId = 'cf-ui-skeleton-image',\n    offsetLeft: offsetLeft,\n    offsetTop: offsetTop,\n    width = 70,\n    height = 70,\n    radiusX = 0,\n    radiusY = 0,\n    ...otherProps\n  } = _ref5;\n  return /*#__PURE__*/$59JSH$react.createElement(\"rect\", {\n    x: offsetLeft,\n    y: offsetTop,\n    rx: radiusX,\n    ry: radiusY,\n    width: width,\n    height: height,\n    \"data-test-id\": testId,\n    ...otherProps\n  });\n};\n\n$fb0ca3c3a071df41$export$d72bf888bd1ed2bc.displayName = 'SkeletonImage';\n\nconst $30c71ab4212f826c$export$46c6672a9bd39b51 = () => {\n  return /*#__PURE__*/$59JSH$react.createElement($59JSH$TableCell, null, /*#__PURE__*/$59JSH$react.createElement($5ce6df81e0e6093a$export$66b8cea0c448285, {\n    svgHeight: 16\n  }, /*#__PURE__*/$59JSH$react.createElement($20cd7b984354214c$export$919fca0c481496d5, {\n    numberOfLines: 1\n  })));\n};\n\nconst $e08101ed77535408$export$8bbcb87f63697989 = _ref6 => {\n  let {\n    columnCount = 5,\n    rowCount = 1\n  } = _ref6;\n  return /*#__PURE__*/$59JSH$react.createElement($59JSH$react.Fragment, null, Array.from(Array(rowCount)).map((_, rowIndex) => /*#__PURE__*/$59JSH$react.createElement($59JSH$TableRow, {\n    key: rowIndex\n  }, Array.from(Array(columnCount)).map((_, cellIndex) => /*#__PURE__*/$59JSH$react.createElement($30c71ab4212f826c$export$46c6672a9bd39b51, {\n    key: cellIndex\n  })))));\n};\n\nexport { $20cd7b984354214c$export$919fca0c481496d5 as SkeletonBodyText, $5ce6df81e0e6093a$export$66b8cea0c448285 as SkeletonContainer, $8d8b0c86f35f77bf$export$406e2958a1a2b65d as SkeletonDisplayText, $fb0ca3c3a071df41$export$d72bf888bd1ed2bc as SkeletonImage, $e08101ed77535408$export$8bbcb87f63697989 as SkeletonRow, $00f6bdd671a67129$export$cb6ddd830302c2a8 as SkeletonText };","map":{"version":3,"mappings":"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","names":["SkeletonText","numberOfLines","offsetLeft","offsetTop","lineHeight","marginBottom","width","getLineWidth","useCallback","lastLine","$59JSH$react","Fragment","Array","from","map","_","index","key","x","y","rx","ry","height","displayName","SkeletonBodyText","otherProps","$00f6bdd671a67129$export$cb6ddd830302c2a8","SkeletonContainer","children","testId","ariaLabel","preserveAspectRatio","backgroundColor","backgroundOpacity","isAnimated","speed","foregroundColor","foregroundOpacity","svgWidth","svgHeight","clipId","gradientId","animateId","uniqueClipId","useId","uniqueGradientId","randomAnimateId","undefined","uniqueAnimateId","$59JSH$Box","as","display","role","clipPath","style","fill","id","offset","stopColor","stopOpacity","attributeName","values","dur","repeatCount","begin","SkeletonDisplayText","SkeletonImage","radiusX","radiusY","SkeletonTableCell","$59JSH$TableCell","$5ce6df81e0e6093a$export$66b8cea0c448285","$20cd7b984354214c$export$919fca0c481496d5","SkeletonRow","columnCount","rowCount","rowIndex","$59JSH$TableRow","cellIndex","$30c71ab4212f826c$export$46c6672a9bd39b51"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonText/SkeletonText.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonBodyText/SkeletonBodyText.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonContainer/SkeletonContainer.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonDisplayText/SkeletonDisplayText.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonImage/SkeletonImage.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonRow/SkeletonTableCell/SkeletonTableCell.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-skeleton/dist/packages/components/skeleton/src/SkeletonRow/SkeletonRow.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonTextProps {\n  /**\n   * A number of skeleton likes\n   */\n  numberOfLines?: number;\n  /**\n   * A distance between top of the container and the first line (in pixels)\n   */\n  offsetTop?: stringOrNumber;\n  /**\n   * A distance between left of the container and the beginning of lines (in pixels)\n   */\n  offsetLeft?: stringOrNumber;\n  /**\n   * A height of a one line (in pixels)\n   */\n  lineHeight?: stringOrNumber;\n  /**\n   * Spacing between lines (in pixels)\n   */\n  marginBottom?: stringOrNumber;\n  /**\n   * A width of a line\n   */\n  width?: stringOrNumber;\n}\n\nexport const SkeletonText = ({\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  lineHeight = 21,\n  marginBottom = 20,\n  width,\n}: SkeletonTextProps) => {\n  const getLineWidth = useCallback(\n    (lastLine: boolean) => {\n      if (width) {\n        return width;\n      }\n\n      return lastLine ? '80%' : '100%';\n    },\n    [width],\n  );\n\n  return (\n    <React.Fragment>\n      {Array.from(Array(numberOfLines)).map((_, index) => (\n        <rect\n          key={`skeleton-display-text-${index}`} // eslint-disable-line\n          x={offsetLeft}\n          y={\n            index * (+lineHeight! + +marginBottom!) + +offsetTop! // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          }\n          rx=\"0\"\n          ry=\"0\"\n          width={getLineWidth(\n            numberOfLines! > 1 && numberOfLines! - index === 1, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          )}\n          height={lineHeight}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nSkeletonText.displayName = 'SkeletonText';\n","import React from 'react';\n\nimport { SkeletonText, SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonBodyTextProps extends SkeletonTextProps {}\n\nexport const SkeletonBodyText = ({\n  lineHeight = 16,\n  marginBottom = 8,\n  numberOfLines = 2,\n  offsetLeft = 0,\n  offsetTop = 0,\n  ...otherProps\n}: SkeletonBodyTextProps) => {\n  return (\n    <SkeletonText\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={\n        numberOfLines! > 0 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          ? numberOfLines\n          : 1\n      }\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      {...otherProps}\n    />\n  );\n};\n","import React from 'react';\nimport { Box, useId } from '@contentful/f36-core';\nimport type { CommonProps } from '@contentful/f36-core';\n\nexport interface SkeletonContainerProps extends CommonProps {\n  /**\n   * Background color of the skeleton\n   */\n  backgroundColor?: string;\n  /**\n   * Background opacity of the skeleton\n   */\n  backgroundOpacity?: number;\n  /**\n   * Whether skeleton has animation or not\n   */\n  isAnimated?: boolean;\n  /**\n   * Speed of the animation\n   */\n  speed?: number | string;\n  /**\n   * Color of the foreground skeleton items\n   */\n  foregroundColor?: string;\n  /**\n   * Opacity of the foreground skeleton items\n   */\n  foregroundOpacity?: number;\n  /**\n   * Width of the SVG element\n   */\n  svgWidth?: string | number;\n  /**\n   * Height of the SVG element\n   */\n  svgHeight?: string | number;\n  /**\n   * Label attribute\n   */\n  ariaLabel?: string;\n  width?: number | string;\n  height?: number | string;\n  clipId?: string;\n  gradientId?: string;\n  animateId?: string;\n  preserveAspectRatio?: string;\n  children: React.ReactNode;\n}\n\nexport const SkeletonContainer = ({\n  children,\n  testId = 'cf-ui-skeleton-form',\n  ariaLabel = 'Loading component...',\n  width = '100%',\n  height = '100%',\n  preserveAspectRatio,\n  backgroundColor = '#e5ebed',\n  backgroundOpacity = 1,\n  isAnimated = true,\n  speed = 2,\n  foregroundColor = '#f7f9fa',\n  foregroundOpacity = 1,\n  svgWidth = '100%',\n  svgHeight = '100%',\n  clipId,\n  gradientId,\n  animateId,\n  ...otherProps\n}: SkeletonContainerProps) => {\n  const uniqueClipId = useId(clipId, 'cf-ui-skeleton-clip');\n  const uniqueGradientId = useId(gradientId, 'cf-ui-skeleton-clip-gradient');\n  const randomAnimateId = useId(undefined, 'animation');\n  const uniqueAnimateId = animateId || randomAnimateId;\n\n  return (\n    <Box\n      as=\"svg\"\n      display=\"block\"\n      role=\"img\"\n      aria-label={ariaLabel}\n      preserveAspectRatio={preserveAspectRatio}\n      width={svgWidth}\n      height={svgHeight}\n      testId={testId}\n      {...otherProps}\n    >\n      {ariaLabel ? <title>{ariaLabel}</title> : null}\n      <rect\n        x=\"0\"\n        y=\"0\"\n        width={width}\n        height={height}\n        clipPath={`url(#${uniqueClipId})`}\n        style={{ fill: `url(#${uniqueGradientId})` }}\n      />\n\n      <defs>\n        <clipPath id={uniqueClipId}>{children}</clipPath>\n\n        <linearGradient id={uniqueGradientId}>\n          <stop\n            offset=\"0%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                id={uniqueAnimateId}\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"50%\"\n            stopColor={foregroundColor}\n            stopOpacity={foregroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                begin={`${uniqueAnimateId}.begin+0.25s`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"100%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                begin={`${uniqueAnimateId}.begin+0.5s`}\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n        </linearGradient>\n      </defs>\n    </Box>\n  );\n};\n\nSkeletonContainer.displayName = 'SkeletonContainer';\n","import React from 'react';\n\nimport { SkeletonText, SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonDisplayTextProps extends SkeletonTextProps {}\n\nexport const SkeletonDisplayText = ({\n  lineHeight = 21,\n  marginBottom = 20,\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  width = 100,\n  ...otherProps\n}: SkeletonDisplayTextProps): React.ReactElement => {\n  return (\n    <SkeletonText\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={numberOfLines}\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      width={width}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonDisplayText.displayName = 'SkeletonDisplayText';\n","import React from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonImageProps {\n  width?: stringOrNumber;\n  height?: stringOrNumber;\n  radiusX?: stringOrNumber;\n  radiusY?: stringOrNumber;\n  offsetLeft?: stringOrNumber;\n  offsetTop?: stringOrNumber;\n  testId?: string;\n}\n\nexport const SkeletonImage = ({\n  testId = 'cf-ui-skeleton-image',\n  offsetLeft,\n  offsetTop,\n  width = 70,\n  height = 70,\n  radiusX = 0,\n  radiusY = 0,\n  ...otherProps\n}: SkeletonImageProps): React.ReactElement => {\n  return (\n    <rect\n      x={offsetLeft}\n      y={offsetTop}\n      rx={radiusX}\n      ry={radiusY}\n      width={width}\n      height={height}\n      data-test-id={testId}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonImage.displayName = 'SkeletonImage';\n","import React from 'react';\nimport { TableCell } from '@contentful/f36-table';\n\nimport { SkeletonContainer } from '../../SkeletonContainer/SkeletonContainer';\nimport { SkeletonBodyText } from '../../SkeletonBodyText/SkeletonBodyText';\n\nexport const SkeletonTableCell = () => {\n  return (\n    <TableCell>\n      <SkeletonContainer\n        svgHeight={16} // This is equal to the default height of a SkeletonText line, if no value is passed the svg will be bigger than the line\n      >\n        <SkeletonBodyText numberOfLines={1} />\n      </SkeletonContainer>\n    </TableCell>\n  );\n};\n","import React from 'react';\nimport { TableRow } from '@contentful/f36-table';\n\nimport { SkeletonTableCell } from './SkeletonTableCell/SkeletonTableCell';\n\nexport interface SkeletonRowProps {\n  /** Defines the number of rows to be rendered */\n  rowCount?: number;\n  /** Defines the number of columns to be rendered */\n  columnCount?: number;\n}\n\nexport const SkeletonRow = ({\n  columnCount = 5,\n  rowCount = 1,\n}: SkeletonRowProps) => {\n  return (\n    <>\n      {Array.from(Array(rowCount)).map((_, rowIndex) => (\n        <TableRow key={rowIndex}>\n          {Array.from(Array(columnCount)).map((_, cellIndex) => (\n            <SkeletonTableCell key={cellIndex} />\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}