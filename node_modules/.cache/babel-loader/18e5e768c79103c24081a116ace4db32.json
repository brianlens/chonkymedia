{"ast":null,"code":"import $bitr6$react, { forwardRef as $bitr6$forwardRef } from \"react\";\nimport { cx as $bitr6$cx, css as $bitr6$css } from \"emotion\";\nimport $bitr6$contentfulf36tokens from \"@contentful/f36-tokens\";\nimport { Box as $bitr6$Box } from \"@contentful/f36-core\";\nconst $832c1840be4d428b$var$ICON_DEFAULT_TAG = 'svg'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst $832c1840be4d428b$var$sizes = {\n  large: {\n    height: '32px',\n    width: '32px'\n  },\n  medium: {\n    height: '24px',\n    width: '24px'\n  },\n  small: {\n    height: '18px',\n    width: '18px'\n  },\n  tiny: {\n    height: '16px',\n    width: '16px'\n  }\n};\nconst $832c1840be4d428b$var$fills = {\n  muted: $bitr6$contentfulf36tokens.gray600,\n  negative: $bitr6$contentfulf36tokens.colorNegative,\n  positive: $bitr6$contentfulf36tokens.colorPositive,\n  primary: $bitr6$contentfulf36tokens.blue600,\n  secondary: $bitr6$contentfulf36tokens.gray900,\n  warning: $bitr6$contentfulf36tokens.colorWarning,\n  white: $bitr6$contentfulf36tokens.colorWhite\n};\n\nconst $832c1840be4d428b$var$useAriaHidden = props => {\n  const ariaLabel = props['aria-label'];\n  const ariaLabelBy = props['aria-labelledby'];\n  if (ariaLabel || ariaLabelBy) return {};\n  return {\n    'aria-hidden': true\n  };\n};\n\nfunction $832c1840be4d428b$export$249b150b883b749c(_ref, forwardedRef) {\n  let {\n    as: as,\n    children: children,\n    className: className,\n    variant = 'primary',\n    size = 'small',\n    testId = 'cf-ui-icon',\n    trimmed: trimmed,\n    viewBox = '0 0 24 24',\n    ...otherProps\n  } = _ref;\n  const shared = {\n    className: $bitr6$cx( /*#__PURE__*/$bitr6$css({\n      fill: $832c1840be4d428b$var$fills[variant],\n      height: $832c1840be4d428b$var$sizes[size].height,\n      width: trimmed ? 'auto' : $832c1840be4d428b$var$sizes[size].width\n    }), className),\n    ref: forwardedRef,\n    testId: testId\n  };\n  const ariaHiddenProps = $832c1840be4d428b$var$useAriaHidden(otherProps);\n  if (as) return /*#__PURE__*/$bitr6$react.createElement($bitr6$Box, {\n    display: \"inline-block\",\n    ...ariaHiddenProps,\n    ...otherProps,\n    ...shared,\n    as: as\n  });\n  return /*#__PURE__*/$bitr6$react.createElement($bitr6$Box, {\n    viewBox: viewBox,\n    display: \"inline-block\",\n    ...ariaHiddenProps,\n    ...otherProps,\n    as: $832c1840be4d428b$var$ICON_DEFAULT_TAG,\n    ...shared\n  }, children);\n}\n\nconst $832c1840be4d428b$export$f04a61298a47a40f = /*#__PURE__*/$bitr6$forwardRef($832c1840be4d428b$export$249b150b883b749c);\n\nfunction $05702af6373917e9$export$ab52cd0edc4744b5(_ref2) {\n  let {\n    name: name,\n    path: path,\n    props: defaultProps,\n    trimmed: trimmed,\n    viewBox: viewBox\n  } = _ref2;\n\n  const Component = function (props) {\n    return /*#__PURE__*/$bitr6$react.createElement($832c1840be4d428b$export$f04a61298a47a40f, {\n      viewBox: viewBox,\n      ...defaultProps,\n      ...props,\n      trimmed: trimmed\n    }, path);\n  };\n\n  if (name) Component.displayName = name;\n  return Component;\n}\n\nexport { $05702af6373917e9$export$ab52cd0edc4744b5 as generateIcon, $832c1840be4d428b$export$f04a61298a47a40f as Icon };","map":{"version":3,"mappings":"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","names":["ICON_DEFAULT_TAG","sizes","large","height","width","medium","small","tiny","fills","muted","tokens","gray600","negative","colorNegative","positive","colorPositive","primary","blue600","secondary","gray900","warning","colorWarning","white","colorWhite","useAriaHidden","props","ariaLabel","ariaLabelBy","_Icon","forwardedRef","as","children","className","variant","size","testId","trimmed","viewBox","otherProps","shared","$bitr6$cx","$bitr6$css","fill","ref","ariaHiddenProps","$bitr6$react","$bitr6$Box","display","Icon","forwardRef","generateIcon","name","path","defaultProps","Component","$832c1840be4d428b$export$f04a61298a47a40f","displayName"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-icon/dist/packages/components/icon/src/Icon.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-icon/dist/packages/components/icon/src/generateIcon.tsx"],"sourcesContent":["import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport { Box } from '@contentful/f36-core';\nimport type {\n  CommonProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport type {\n  ComponentType,\n  ExoticComponent,\n  ReactElement,\n  SVGAttributes,\n} from 'react';\n\nconst ICON_DEFAULT_TAG = 'svg';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type IconComponent = ExoticComponent<any> | ComponentType<any>;\n\nexport type IconSize = 'large' | 'medium' | 'small' | 'tiny';\n\nexport type IconVariant =\n  | 'negative'\n  | 'positive'\n  | 'primary'\n  | 'secondary'\n  | 'warning'\n  | 'muted'\n  | 'white';\n\nconst sizes: { [key in IconSize]: { [key in 'height' | 'width']: string } } = {\n  large: {\n    height: '32px',\n    width: '32px',\n  },\n  medium: {\n    height: '24px',\n    width: '24px',\n  },\n  small: {\n    height: '18px',\n    width: '18px',\n  },\n  tiny: {\n    height: '16px',\n    width: '16px',\n  },\n};\n\nconst fills: { [key in IconVariant]: string } = {\n  muted: tokens.gray600,\n  negative: tokens.colorNegative,\n  positive: tokens.colorPositive,\n  primary: tokens.blue600,\n  secondary: tokens.gray900,\n  warning: tokens.colorWarning,\n  white: tokens.colorWhite,\n};\n\nexport type IconInternalProps = CommonProps & {\n  children?: ReactElement | ReactElement[];\n  /**\n   * Determines the size of the icon\n   */\n  size?: IconSize;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: boolean;\n  /**\n   * Determines the fill color used\n   */\n  variant?: IconVariant;\n  /**\n   * Custom SVG viewBox attribute to use\n   */\n  viewBox?: SVGAttributes<SVGSVGElement>['viewBox'];\n};\n\nexport type IconProps<\n  E extends React.ElementType = IconComponent\n> = PolymorphicProps<\n  IconInternalProps,\n  E,\n  'as' | 'children' | 'width' | 'height'\n>;\n\nconst useAriaHidden = (\n  props: Pick<\n    IconProps<typeof ICON_DEFAULT_TAG>,\n    'aria-label' | 'aria-labelledby'\n  >,\n) => {\n  const ariaLabel = props['aria-label'];\n  const ariaLabelBy = props['aria-labelledby'];\n\n  if (ariaLabel || ariaLabelBy) {\n    return {};\n  }\n\n  return {\n    'aria-hidden': true,\n  };\n};\n\nexport function _Icon<E extends React.ElementType = IconComponent>(\n  {\n    as,\n    children,\n    className,\n    variant = 'primary',\n    size = 'small',\n    testId = 'cf-ui-icon',\n    trimmed,\n    viewBox = '0 0 24 24',\n    ...otherProps\n  }: IconProps<E>,\n  forwardedRef: React.Ref<any>,\n) {\n  const shared = {\n    className: cx(\n      css({\n        fill: fills[variant],\n        height: sizes[size].height,\n        width: trimmed ? 'auto' : sizes[size].width,\n      }),\n      className,\n    ),\n    ref: forwardedRef,\n    testId,\n  };\n\n  const ariaHiddenProps = useAriaHidden(otherProps);\n\n  if (as) {\n    return (\n      <Box\n        display=\"inline-block\"\n        {...ariaHiddenProps}\n        {...otherProps}\n        {...shared}\n        as={as as React.ElementType}\n      />\n    );\n  }\n\n  return (\n    <Box\n      viewBox={viewBox}\n      display=\"inline-block\"\n      {...ariaHiddenProps}\n      {...otherProps}\n      as={ICON_DEFAULT_TAG}\n      {...shared}\n    >\n      {children}\n    </Box>\n  );\n}\n\nexport const Icon: PolymorphicComponent<\n  ExpandProps<IconInternalProps>,\n  typeof ICON_DEFAULT_TAG,\n  'width' | 'height'\n> = forwardRef(_Icon);\n","import React from 'react';\nimport type { ReactElement } from 'react';\n\nimport { Icon } from './Icon';\nimport type { IconProps } from './Icon';\n\nexport type GeneratedIconProps = Omit<\n  IconProps,\n  'as' | 'children' | 'name' | 'viewBox'\n> & { children?: never };\n\ntype GenerateIconParameters = {\n  /**\n   * Icon name is used as the generated icon's component display name\n   */\n  name?: string;\n  /**\n   * The SVG path(s) to render in the icon wrapper\n   */\n  path: ReactElement;\n  /**\n   * A collection of default props to set on the generated icon\n   */\n  props?: GeneratedIconProps;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: IconProps['trimmed'];\n  /**\n   * Custom SVG viewBox attribute to use for the generated icon\n   */\n  viewBox?: IconProps['viewBox'];\n};\n\nexport function generateIcon({\n  name,\n  path,\n  props: defaultProps,\n  trimmed,\n  viewBox,\n}: GenerateIconParameters) {\n  const Component = function (props: IconProps) {\n    return (\n      <Icon viewBox={viewBox} {...defaultProps} {...props} trimmed={trimmed}>\n        {path}\n      </Icon>\n    );\n  };\n\n  if (name) {\n    Component.displayName = name;\n  }\n\n  return Component;\n}\n"]},"metadata":{},"sourceType":"module"}