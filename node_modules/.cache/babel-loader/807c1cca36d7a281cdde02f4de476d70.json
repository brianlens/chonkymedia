{"ast":null,"code":"import $fOf7N$react from \"react\";\nimport { Button as $fOf7N$Button } from \"@contentful/f36-button\";\nimport { Select as $fOf7N$Select } from \"@contentful/f36-forms\";\nimport { Flex as $fOf7N$Flex, Stack as $fOf7N$Stack } from \"@contentful/f36-core\";\nimport { ChevronLeftIcon as $fOf7N$ChevronLeftIcon, ChevronRightIcon as $fOf7N$ChevronRightIcon } from \"@contentful/f36-icons\";\nimport { Text as $fOf7N$Text } from \"@contentful/f36-typography\";\n\nfunction $464217508f949703$export$e7e603fcfe95ef16(_ref) {\n  let {\n    activePage: activePage,\n    itemsPerPage: itemsPerPage,\n    totalItems = 0,\n    pageLength: pageLength,\n    isLastPage = false\n  } = _ref;\n  const total = totalItems ? `of ${totalItems} items` : '';\n  const firstItem = activePage * itemsPerPage + 1;\n  if (isLastPage && pageLength) return [`${firstItem} - ${firstItem - 1 + pageLength}`, total].join(' ');\n\n  if (totalItems) {\n    const lastItem = Math.min(firstItem - 1 + itemsPerPage, totalItems);\n    return [`${firstItem} - ${lastItem}`, total].join(' ');\n  }\n\n  return [`${firstItem} - ${firstItem - 1 + itemsPerPage}`, total].join(' ');\n}\n\nfunction $88dc92af410a07e4$var$_Pagination(props, ref) {\n  const {\n    className: className,\n    onPageChange: onPageChange,\n    testId = 'cf-ui-pagination',\n    activePage: propsActivePage,\n    itemsPerPage = 20,\n    pageLength: pageLength,\n    isLastPage: propsLastPage = false,\n    activePage = 0,\n    viewPerPageOptions = [20, 100],\n    showViewPerPage = false,\n    totalItems: totalItems,\n    onViewPerPageChange: onViewPerPageChange,\n    ...otherProps\n  } = props;\n  const isFirstPage = activePage === 0;\n  const isLastPage = propsLastPage || totalItems && (activePage + 1) * itemsPerPage >= totalItems;\n  const totalText = $464217508f949703$export$e7e603fcfe95ef16({\n    totalItems: totalItems,\n    activePage: activePage,\n    itemsPerPage: itemsPerPage,\n    pageLength: pageLength,\n    isLastPage: isLastPage\n  });\n  return /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Flex, {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    fullWidth: true,\n    className: className,\n    testId: testId,\n    ref: ref,\n    ...otherProps\n  }, showViewPerPage && /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Stack, null, /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Text, {\n    fontColor: \"gray500\"\n  }, \"View\"), /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Select, {\n    value: `${itemsPerPage}`,\n    onChange: e => onViewPerPageChange && onViewPerPageChange(+e.target.value)\n  }, viewPerPageOptions.map(option => /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Select.Option, {\n    key: option,\n    value: option\n  }, option)))), /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Stack, {\n    flexGrow: 1,\n    justifyContent: \"flex-end\"\n  }, /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Text, {\n    fontColor: \"gray500\"\n  }, totalText), /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Stack, {\n    spacing: \"spacingS\"\n  }, !isFirstPage && /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Button, {\n    \"aria-label\": \"To previous page\",\n    startIcon: /*#__PURE__*/$fOf7N$react.createElement($fOf7N$ChevronLeftIcon, null),\n    variant: \"secondary\",\n    onClick: () => onPageChange(activePage - 1),\n    testId: \"cf-ui-pagination-previous\"\n  }, \"Previous\"), !isLastPage && /*#__PURE__*/$fOf7N$react.createElement($fOf7N$Button, {\n    \"aria-label\": \"To next page\",\n    variant: \"secondary\",\n    endIcon: /*#__PURE__*/$fOf7N$react.createElement($fOf7N$ChevronRightIcon, null),\n    onClick: () => onPageChange(activePage + 1),\n    testId: \"cf-ui-pagination-next\"\n  }, \"Next\"))));\n}\n\n$88dc92af410a07e4$var$_Pagination.displayName = 'Pagination';\nconst $88dc92af410a07e4$export$68f5e1453c188a82 = /*#__PURE__*/$fOf7N$react.forwardRef($88dc92af410a07e4$var$_Pagination);\nexport { $88dc92af410a07e4$export$68f5e1453c188a82 as Pagination, $464217508f949703$export$e7e603fcfe95ef16 as getRangeText };","map":{"version":3,"mappings":"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","names":["getRangeText","activePage","itemsPerPage","totalItems","pageLength","isLastPage","total","firstItem","join","lastItem","Math","min","_Pagination","props","ref","className","onPageChange","testId","propsActivePage","propsLastPage","viewPerPageOptions","showViewPerPage","onViewPerPageChange","otherProps","isFirstPage","totalText","$fOf7N$react","$fOf7N$Flex","flexDirection","justifyContent","fullWidth","$fOf7N$Stack","$fOf7N$Text","fontColor","$fOf7N$Select","value","onChange","e","target","map","option","Option","key","flexGrow","spacing","$fOf7N$Button","startIcon","$fOf7N$ChevronLeftIcon","variant","onClick","endIcon","$fOf7N$ChevronRightIcon","displayName","Pagination","React","forwardRef"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-pagination/dist/packages/components/pagination/src/utils.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-pagination/dist/packages/components/pagination/src/Pagination.tsx"],"sourcesContent":["export function getRangeText({\n  activePage,\n  itemsPerPage,\n  totalItems = 0,\n  pageLength,\n  isLastPage = false,\n}: {\n  activePage: number;\n  itemsPerPage: number;\n  totalItems?: number;\n  pageLength?: number;\n  isLastPage?: boolean;\n}): string {\n  const total = totalItems ? `of ${totalItems} items` : '';\n  const firstItem = activePage * itemsPerPage + 1;\n  if (isLastPage && pageLength) {\n    return [`${firstItem} - ${firstItem - 1 + pageLength}`, total].join(' ');\n  }\n  if (totalItems) {\n    const lastItem = Math.min(firstItem - 1 + itemsPerPage, totalItems);\n    return [`${firstItem} - ${lastItem}`, total].join(' ');\n  }\n  return [`${firstItem} - ${firstItem - 1 + itemsPerPage}`, total].join(' ');\n}\n","import React from 'react';\n\nimport { Button } from '@contentful/f36-button';\nimport { Select } from '@contentful/f36-forms';\nimport { Stack, Flex } from '@contentful/f36-core';\nimport type { CommonProps } from '@contentful/f36-core';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\n\nimport { getRangeText } from './utils';\n\nexport interface PaginationProps extends CommonProps {\n  /**\n   * Sets which page is active on the Pagination\n   * @default 0\n   */\n  activePage?: number;\n  /**\n   * Sets if the user is on the last page of navigation\n   * @default false\n   */\n  isLastPage?: boolean;\n  /**\n   * Number of items are actually on the page.\n   * If no value is set it defaults to viewPerPage value\n   * @default 20\n   */\n  pageLength?: number;\n  /**\n   * Total amount of items the pagination is applied to.\n   */\n  totalItems?: number;\n  /**\n   * Sets if the View per page selector is shown\n   * @default false\n   */\n  showViewPerPage?: boolean;\n  /**\n   * Sets how many items are displayed per page.\n   * Must be one of the values passed on viewPerPageOptions prop.\n   * @default 20\n   */\n  itemsPerPage?: number;\n  /**\n   * Array of options to show on the View select\n   * @default [20, 100]\n   */\n  viewPerPageOptions?: number[];\n  /**\n   * Handler function called when user changes the view per page selector.\n   */\n  onViewPerPageChange?: (items: number) => void;\n  /**\n   * Handler function called when user navigates to another page on the pagination.\n   */\n  onPageChange: (page: number) => void;\n}\n\nfunction _Pagination(props: PaginationProps, ref: React.Ref<HTMLDivElement>) {\n  const {\n    className,\n    onPageChange,\n    testId = 'cf-ui-pagination',\n    activePage: propsActivePage,\n    itemsPerPage = 20,\n    pageLength,\n    isLastPage: propsLastPage = false,\n    activePage = 0,\n    viewPerPageOptions = [20, 100],\n    showViewPerPage = false,\n    totalItems,\n    onViewPerPageChange,\n    ...otherProps\n  } = props;\n  const isFirstPage = activePage === 0;\n  const isLastPage =\n    propsLastPage ||\n    (totalItems && (activePage + 1) * itemsPerPage >= totalItems);\n  const totalText = getRangeText({\n    totalItems,\n    activePage,\n    itemsPerPage,\n    pageLength,\n    isLastPage,\n  });\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n      fullWidth\n      className={className}\n      testId={testId}\n      ref={ref}\n      {...otherProps}\n    >\n      {showViewPerPage && (\n        <Stack>\n          <Text fontColor=\"gray500\">View</Text>\n          <Select\n            value={`${itemsPerPage}`}\n            onChange={(e) =>\n              onViewPerPageChange && onViewPerPageChange(+e.target.value)\n            }\n          >\n            {viewPerPageOptions.map((option) => (\n              <Select.Option key={option} value={option}>\n                {option}\n              </Select.Option>\n            ))}\n          </Select>\n        </Stack>\n      )}\n      <Stack flexGrow={1} justifyContent=\"flex-end\">\n        <Text fontColor=\"gray500\">{totalText}</Text>\n        <Stack spacing=\"spacingS\">\n          {!isFirstPage && (\n            <Button\n              aria-label=\"To previous page\"\n              startIcon={<ChevronLeftIcon />}\n              variant=\"secondary\"\n              onClick={() => onPageChange(activePage - 1)}\n              testId=\"cf-ui-pagination-previous\"\n            >\n              Previous\n            </Button>\n          )}\n          {!isLastPage && (\n            <Button\n              aria-label=\"To next page\"\n              variant=\"secondary\"\n              endIcon={<ChevronRightIcon />}\n              onClick={() => onPageChange(activePage + 1)}\n              testId=\"cf-ui-pagination-next\"\n            >\n              Next\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n    </Flex>\n  );\n}\n\n_Pagination.displayName = 'Pagination';\n\nexport const Pagination = React.forwardRef(_Pagination);\n"]},"metadata":{},"sourceType":"module"}