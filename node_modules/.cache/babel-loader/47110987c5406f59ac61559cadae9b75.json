{"ast":null,"code":"import { cx as $7kzxa$cx, css as $7kzxa$css } from \"emotion\";\nimport $7kzxa$react, { useState as $7kzxa$useState, useRef as $7kzxa$useRef, useEffect as $7kzxa$useEffect } from \"react\";\nimport { usePopper as $7kzxa$usePopper } from \"react-popper\";\nimport $7kzxa$contentfulf36tokens from \"@contentful/f36-tokens\";\nimport { Portal as $7kzxa$Portal } from \"@contentful/f36-utils\";\nimport { useId as $7kzxa$useId, Box as $7kzxa$Box } from \"@contentful/f36-core\";\nconst $49750c3007fb3a4b$var$tooltipMargin = `calc(-1 * ((1rem * (10 / ${$7kzxa$contentfulf36tokens.fontBaseDefault})) / 2))`;\nconst $49750c3007fb3a4b$var$tooltipChevronSize = `calc(1rem * (10 / ${$7kzxa$contentfulf36tokens.fontBaseDefault}))`;\n\nfunction $49750c3007fb3a4b$export$ffd58b7f6f099a57() {\n  return {\n    tooltipTargetWrapper: /*#__PURE__*/$7kzxa$css({\n      name: \"b3pn3b\",\n      styles: \"display:inline-block;position:relative;\"\n    }),\n    tooltip: /*#__PURE__*/$7kzxa$css({\n      background: $7kzxa$contentfulf36tokens.gray900,\n      fontFamily: $7kzxa$contentfulf36tokens.fontStackPrimary,\n      fontSize: $7kzxa$contentfulf36tokens.fontSizeS,\n      fontWeight: $7kzxa$contentfulf36tokens.fontWeightNormal,\n      fontStyle: 'normal',\n      textDecoration: 'none',\n      color: $7kzxa$contentfulf36tokens.colorWhite,\n      textAlign: 'center',\n      lineHeight: $7kzxa$contentfulf36tokens.lineHeightM,\n      padding: `${$7kzxa$contentfulf36tokens.spacingXs} calc(1rem * (10 / ${$7kzxa$contentfulf36tokens.fontBaseDefault}))`,\n      borderRadius: $7kzxa$contentfulf36tokens.borderRadiusMedium,\n      whiteSpace: 'normal'\n    }),\n    tooltipHidden: /*#__PURE__*/$7kzxa$css({\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      zIndex: $7kzxa$contentfulf36tokens.zIndexNegative\n    }),\n    tooltipContainer: /*#__PURE__*/$7kzxa$css({\n      name: \"1nqn0g6\",\n      styles: \"& > button[disabled]{pointer-events:none;}\"\n    }),\n    tooltipArrow: /*#__PURE__*/$7kzxa$css({\n      position: 'absolute',\n      '&[data-placement*=\"top\"]': {\n        bottom: 0,\n        left: 0,\n        marginBottom: $49750c3007fb3a4b$var$tooltipMargin\n      },\n      '&[data-placement*=\"right\"]': {\n        left: 0,\n        marginLeft: $49750c3007fb3a4b$var$tooltipMargin\n      },\n      '&[data-placement*=\"bottom\"]': {\n        left: 0,\n        top: 0,\n        marginTop: $49750c3007fb3a4b$var$tooltipMargin\n      },\n      '&[data-placement*=\"left\"]': {\n        right: 0,\n        marginRight: $49750c3007fb3a4b$var$tooltipMargin\n      },\n      '&::before': {\n        content: '\"\"',\n        display: 'block',\n        height: $49750c3007fb3a4b$var$tooltipChevronSize,\n        width: $49750c3007fb3a4b$var$tooltipChevronSize,\n        backgroundColor: $7kzxa$contentfulf36tokens.gray900,\n        transform: 'rotate3d(0, 0, 1, 45deg)',\n        zIndex: $7kzxa$contentfulf36tokens.zIndexNegative\n      }\n    })\n  };\n}\n\nconst $1562140b30d515d0$export$28c660c63b792dea = _ref => {\n  let {\n    children: children,\n    className: className,\n    as: HtmlTag = 'span',\n    content: content,\n    id: id,\n    isVisible: isVisible,\n    hideDelay = 0,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseLeave: onMouseLeave,\n    onMouseOver: onMouseOver,\n    onKeyDown: onKeyDown,\n    targetWrapperClassName: targetWrapperClassName,\n    maxWidth = 360,\n    testId = 'cf-ui-tooltip',\n    placement = 'auto',\n    usePortal = false,\n    isDisabled = false,\n    ...otherProps\n  } = _ref;\n  const styles = $49750c3007fb3a4b$export$ffd58b7f6f099a57();\n  const [show, setShow] = $7kzxa$useState(false);\n  const tooltipId = $7kzxa$useId(id, 'tooltip');\n  const elementRef = $7kzxa$useRef(null);\n  const popperRef = $7kzxa$useRef(null);\n  const [arrowRef, setArrowRef] = $7kzxa$useState(null);\n  const {\n    styles: popperStyles,\n    attributes: attributes,\n    forceUpdate: forceUpdate\n  } = $7kzxa$usePopper(elementRef.current, popperRef.current, {\n    placement: placement,\n    modifiers: [{\n      name: 'arrow',\n      options: {\n        element: arrowRef,\n        padding: parseFloat($7kzxa$contentfulf36tokens.borderRadiusSmall)\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 10]\n      }\n    }]\n  }); // necessary to update tooltip position in case the content is being updated\n\n  $7kzxa$useEffect(() => {\n    if (forceUpdate !== null) forceUpdate();\n  }, [content, forceUpdate]);\n  const [isHoveringTarget, setIsHoveringTarget] = $7kzxa$useState(false);\n  const [isHoveringContent, setIsHoveringContent] = $7kzxa$useState(false);\n  $7kzxa$useEffect(() => {\n    setShow(isHoveringContent || isHoveringTarget);\n  }, [isHoveringTarget, isHoveringContent]);\n  $7kzxa$useEffect(() => {\n    if (isVisible) setShow(true); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const contentMaxWidth = typeof maxWidth === 'string' ? maxWidth : `${maxWidth}px`;\n  const contentStyles = {\n    zIndex: $7kzxa$contentfulf36tokens.zIndexTooltip,\n    maxWidth: contentMaxWidth,\n    ...popperStyles.popper\n  };\n  if (!content || isDisabled) return /*#__PURE__*/$7kzxa$react.createElement($7kzxa$Box, {\n    as: HtmlTag,\n    className: targetWrapperClassName\n  }, children);\n  const tooltip = /*#__PURE__*/$7kzxa$react.createElement($7kzxa$Box, {\n    as: \"span\",\n    id: tooltipId,\n    ref: popperRef,\n    role: \"tooltip\",\n    style: contentStyles,\n    className: $7kzxa$cx(styles.tooltip, className),\n    testId: testId,\n    onMouseEnter: () => {\n      setIsHoveringContent(true);\n    },\n    onMouseLeave: () => {\n      setIsHoveringContent(false);\n    },\n    ...attributes.popper\n  }, /*#__PURE__*/$7kzxa$react.createElement(\"span\", null, content), /*#__PURE__*/$7kzxa$react.createElement(\"span\", {\n    className: styles.tooltipArrow,\n    \"data-placement\": attributes.popper && attributes.popper['data-popper-placement'],\n    ref: setArrowRef,\n    style: popperStyles.arrow\n  }));\n  return /*#__PURE__*/$7kzxa$react.createElement($7kzxa$react.Fragment, null, show ? /*#__PURE__*/$7kzxa$react.createElement($7kzxa$react.Fragment, null, usePortal ? /*#__PURE__*/$7kzxa$react.createElement($7kzxa$Portal, null, tooltip) : tooltip) : null, /*#__PURE__*/$7kzxa$react.createElement($7kzxa$Box, {\n    as: HtmlTag,\n    ref: elementRef,\n    className: $7kzxa$cx(styles.tooltipContainer, targetWrapperClassName),\n    onMouseEnter: evt => {\n      setIsHoveringTarget(true);\n      if (onMouseOver) onMouseOver(evt);\n    },\n    onMouseLeave: evt => {\n      setTimeout(() => setIsHoveringTarget(false), hideDelay);\n      if (onMouseLeave) onMouseLeave(evt);\n    },\n    onFocus: evt => {\n      setIsHoveringTarget(true);\n      if (onFocus) onFocus(evt);\n    },\n    onBlur: evt => {\n      setTimeout(() => setIsHoveringTarget(false), hideDelay);\n      if (onBlur) onBlur(evt);\n    },\n    onKeyDown: evt => {\n      if (evt.key === 'Escape') setTimeout(() => setIsHoveringTarget(false), hideDelay);\n      if (onKeyDown) onKeyDown(evt);\n    },\n    ...otherProps\n  }, $7kzxa$react.Children.map(children, child => {\n    if ( /*#__PURE__*/$7kzxa$react.isValidElement(child)) return /*#__PURE__*/$7kzxa$react.cloneElement(child, {\n      'aria-describedby': tooltipId\n    });\n  })));\n};\n\nexport { $1562140b30d515d0$export$28c660c63b792dea as Tooltip };","map":{"version":3,"mappings":"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","names":["tooltipMargin","tokens","fontBaseDefault","tooltipChevronSize","getStyles","tooltipTargetWrapper","$7kzxa$css","name","styles","tooltip","background","gray900","fontFamily","fontStackPrimary","fontSize","fontSizeS","fontWeight","fontWeightNormal","fontStyle","textDecoration","color","colorWhite","textAlign","lineHeight","lineHeightM","padding","spacingXs","borderRadius","borderRadiusMedium","whiteSpace","tooltipHidden","visibility","pointerEvents","zIndex","zIndexNegative","tooltipContainer","tooltipArrow","position","bottom","left","marginBottom","marginLeft","top","marginTop","right","marginRight","content","display","height","width","backgroundColor","transform","Tooltip","children","className","as","HtmlTag","id","isVisible","hideDelay","onBlur","onFocus","onMouseLeave","onMouseOver","onKeyDown","targetWrapperClassName","maxWidth","testId","placement","usePortal","isDisabled","otherProps","show","setShow","useState","tooltipId","useId","elementRef","useRef","popperRef","arrowRef","setArrowRef","popperStyles","attributes","forceUpdate","usePopper","current","modifiers","options","element","parseFloat","borderRadiusSmall","offset","useEffect","isHoveringTarget","setIsHoveringTarget","isHoveringContent","setIsHoveringContent","contentMaxWidth","contentStyles","zIndexTooltip","popper","$7kzxa$react","$7kzxa$Box","ref","role","style","$7kzxa$cx","onMouseEnter","arrow","$7kzxa$Portal","evt","setTimeout","key","React","Children","map","child","isValidElement","cloneElement"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-tooltip/dist/packages/components/tooltip/src/Tooltip.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-tooltip/dist/packages/components/tooltip/src/Tooltip.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nconst tooltipMargin = `calc(-1 * ((1rem * (10 / ${tokens.fontBaseDefault})) / 2))`;\nconst tooltipChevronSize = `calc(1rem * (10 / ${tokens.fontBaseDefault}))`;\n\nexport function getStyles() {\n  return {\n    tooltipTargetWrapper: css({\n      display: 'inline-block',\n      position: 'relative',\n    }),\n    tooltip: css({\n      background: tokens.gray900,\n      fontFamily: tokens.fontStackPrimary,\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightNormal,\n      fontStyle: 'normal',\n      textDecoration: 'none',\n      color: tokens.colorWhite,\n      textAlign: 'center',\n      lineHeight: tokens.lineHeightM,\n      padding: `${tokens.spacingXs} calc(1rem * (10 / ${tokens.fontBaseDefault}))`,\n      borderRadius: tokens.borderRadiusMedium,\n      whiteSpace: 'normal',\n    }),\n    tooltipHidden: css({\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      zIndex: tokens.zIndexNegative,\n    }),\n    tooltipContainer: css({\n      '& > button[disabled]': { pointerEvents: 'none' },\n    }),\n    tooltipArrow: css({\n      position: 'absolute',\n      '&[data-placement*=\"top\"]': {\n        bottom: 0,\n        left: 0,\n        marginBottom: tooltipMargin,\n      },\n      '&[data-placement*=\"right\"]': {\n        left: 0,\n        marginLeft: tooltipMargin,\n      },\n      '&[data-placement*=\"bottom\"]': {\n        left: 0,\n        top: 0,\n        marginTop: tooltipMargin,\n      },\n      '&[data-placement*=\"left\"]': {\n        right: 0,\n        marginRight: tooltipMargin,\n      },\n      '&::before': {\n        content: '\"\"',\n        display: 'block',\n        height: tooltipChevronSize,\n        width: tooltipChevronSize,\n        backgroundColor: tokens.gray900,\n        transform: 'rotate3d(0, 0, 1, 45deg)',\n        zIndex: tokens.zIndexNegative,\n      },\n    }),\n  };\n}\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  MouseEvent,\n  FocusEvent,\n  CSSProperties,\n} from 'react';\nimport { usePopper } from 'react-popper';\nimport type { Placement } from '@popperjs/core';\nimport { cx } from 'emotion';\nimport type * as CSS from 'csstype';\n\nimport { getStyles } from './Tooltip.styles';\n\nimport tokens from '@contentful/f36-tokens';\n\nimport { Portal } from '@contentful/f36-utils';\nimport type { CommonProps } from '@contentful/f36-core';\nimport { Box, useId } from '@contentful/f36-core';\n\nexport type TooltipPlacement = Placement;\n\nexport interface TooltipProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component and that will show the tooltip when they are hovered\n   */\n  children: React.ReactNode;\n  /**\n   * HTML element used to wrap the target of the tooltip\n   */\n  as?: React.ElementType;\n  /**\n   * Content of the tooltip\n   */\n  content?: string;\n  /**\n   * A unique id of the tooltip\n   */\n  id?: string;\n  /**\n   * It controls the initial visibility of the tooltip\n   */\n  isVisible?: boolean;\n  /**\n   * It sets a max-width for the tooltip\n   */\n  maxWidth?: number | CSS.Property.MaxWidth;\n  /**\n   * It sets a delay period for the tooltip\n   */\n  hideDelay?: number;\n  /**\n   * Function that will be called when target gets blurred\n   */\n  onBlur?: (evt: FocusEvent) => void;\n  /**\n   * Function that will be called when target gets focused\n   */\n  onFocus?: (evt: FocusEvent) => void;\n  /**\n   * Function that will be called when the user move the mouse out of the target\n   */\n  onMouseLeave?: (evt: MouseEvent) => void;\n  /**\n   * Function that will be called when the user move the mouse over of the target\n   */\n  onMouseOver?: (evt: MouseEvent) => void;\n  /**\n   * Function that will be called when the user uses a keyboard key on the target\n   */\n  onKeyDown?: (evt: KeyboardEvent) => void;\n\n  /**\n   * It sets the \"preferred\" position of the tooltip\n   */\n  placement?: TooltipPlacement;\n  /**\n   * Class names to be appended to the className prop of the tooltip’s target\n   */\n  targetWrapperClassName?: string;\n  /**\n   * Boolean to control whether or not to render the tooltip in a React Portal.\n   * Rendering content inside a Portal allows the tooltip to escape the bounds\n   * of its parent while still being positioned correctly. Using a Portal is\n   * necessary if an ancestor of the tooltip hides overflow.\n   *\n   * Defaults to `false`\n   */\n  usePortal?: boolean;\n  /**\n   * Prevents showing the tooltip\n   * @default false\n   */\n  isDisabled?: boolean;\n}\n\nexport const Tooltip = ({\n  children,\n  className,\n  as: HtmlTag = 'span',\n  content,\n  id,\n  isVisible,\n  hideDelay = 0,\n  onBlur,\n  onFocus,\n  onMouseLeave,\n  onMouseOver,\n  onKeyDown,\n  targetWrapperClassName,\n  maxWidth = 360,\n  testId = 'cf-ui-tooltip',\n  placement = 'auto',\n  usePortal = false,\n  isDisabled = false,\n  ...otherProps\n}: TooltipProps) => {\n  const styles = getStyles();\n  const [show, setShow] = useState(false);\n  const tooltipId = useId(id, 'tooltip');\n  const elementRef = useRef(null);\n  const popperRef = useRef(null);\n  const [arrowRef, setArrowRef] = useState<HTMLSpanElement | null>(null);\n  const { styles: popperStyles, attributes, forceUpdate } = usePopper(\n    elementRef.current,\n    popperRef.current,\n    {\n      placement: placement,\n      modifiers: [\n        {\n          name: 'arrow',\n          options: {\n            element: arrowRef,\n            padding: parseFloat(tokens.borderRadiusSmall),\n          },\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: [0, 10],\n          },\n        },\n      ],\n    },\n  );\n\n  // necessary to update tooltip position in case the content is being updated\n  useEffect(() => {\n    if (forceUpdate !== null) {\n      forceUpdate();\n    }\n  }, [content, forceUpdate]);\n\n  const [isHoveringTarget, setIsHoveringTarget] = useState(false);\n  const [isHoveringContent, setIsHoveringContent] = useState(false);\n  useEffect(() => {\n    setShow(isHoveringContent || isHoveringTarget);\n  }, [isHoveringTarget, isHoveringContent]);\n\n  useEffect(() => {\n    if (isVisible) setShow(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const contentMaxWidth =\n    typeof maxWidth === 'string' ? maxWidth : `${maxWidth}px`;\n\n  const contentStyles: CSSProperties = {\n    zIndex: tokens.zIndexTooltip,\n    maxWidth: contentMaxWidth,\n    ...popperStyles.popper,\n  };\n\n  if (!content || isDisabled) {\n    return (\n      <Box as={HtmlTag} className={targetWrapperClassName}>\n        {children}\n      </Box>\n    );\n  }\n\n  const tooltip = (\n    <Box\n      as=\"span\"\n      id={tooltipId}\n      ref={popperRef}\n      role=\"tooltip\"\n      style={contentStyles}\n      className={cx(styles.tooltip, className)}\n      testId={testId}\n      onMouseEnter={() => {\n        setIsHoveringContent(true);\n      }}\n      onMouseLeave={() => {\n        setIsHoveringContent(false);\n      }}\n      {...attributes.popper}\n    >\n      <span>{content}</span>\n      <span\n        className={styles.tooltipArrow}\n        data-placement={\n          attributes.popper && attributes.popper['data-popper-placement']\n        }\n        ref={setArrowRef}\n        style={popperStyles.arrow}\n      />\n    </Box>\n  );\n\n  return (\n    <>\n      {show ? <>{usePortal ? <Portal>{tooltip}</Portal> : tooltip}</> : null}\n      <Box\n        as={HtmlTag}\n        ref={elementRef}\n        className={cx(styles.tooltipContainer, targetWrapperClassName)}\n        onMouseEnter={(evt: MouseEvent) => {\n          setIsHoveringTarget(true);\n          if (onMouseOver) onMouseOver(evt);\n        }}\n        onMouseLeave={(evt: MouseEvent) => {\n          setTimeout(() => setIsHoveringTarget(false), hideDelay);\n          if (onMouseLeave) onMouseLeave(evt);\n        }}\n        onFocus={(evt: FocusEvent) => {\n          setIsHoveringTarget(true);\n          if (onFocus) onFocus(evt);\n        }}\n        onBlur={(evt: FocusEvent) => {\n          setTimeout(() => setIsHoveringTarget(false), hideDelay);\n          if (onBlur) onBlur(evt);\n        }}\n        onKeyDown={(evt: KeyboardEvent) => {\n          if (evt.key === 'Escape') {\n            setTimeout(() => setIsHoveringTarget(false), hideDelay);\n          }\n          if (onKeyDown) onKeyDown(evt);\n        }}\n        {...otherProps}\n      >\n        {React.Children.map<React.ReactNode, React.ReactNode>(\n          children,\n          (child) => {\n            if (React.isValidElement(child)) {\n              return React.cloneElement(child, {\n                'aria-describedby': tooltipId,\n              });\n            }\n          },\n        )}\n      </Box>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}