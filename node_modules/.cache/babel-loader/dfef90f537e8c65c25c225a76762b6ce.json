{"ast":null,"code":"import { cx as $8USmO$cx, css as $8USmO$css } from \"emotion\";\nimport $8USmO$react, { useState as $8USmO$useState, useCallback as $8USmO$useCallback } from \"react\";\nimport { DragIcon as $8USmO$DragIcon } from \"@contentful/f36-icons\";\nimport $8USmO$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $1282af47e008eae6$export$ffd58b7f6f099a57 = () => ({\n  label: /*#__PURE__*/$8USmO$css({\n    name: \"1b512s9\",\n    styles: \"position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0;\"\n  }),\n  root: _ref => {\n    let {\n      isActive: isActive,\n      isFocused: isFocused,\n      isHovered: isHovered\n    } = _ref;\n    return $8USmO$cx( /*#__PURE__*/$8USmO$css({\n      alignItems: 'center',\n      backgroundColor: $8USmO$contentfulf36tokens.gray100,\n      border: 0,\n      borderBottomLeftRadius: $8USmO$contentfulf36tokens.borderRadiusMedium,\n      borderRight: `1px solid ${$8USmO$contentfulf36tokens.gray200}`,\n      borderTopLeftRadius: $8USmO$contentfulf36tokens.borderRadiusMedium,\n      boxSizing: 'border-box',\n      display: 'flex',\n      justifyContent: 'center',\n      padding: 0,\n      position: 'relative',\n      transition: `background-color ${$8USmO$contentfulf36tokens.transitionDurationDefault} ${$8USmO$contentfulf36tokens.transitionEasingDefault}`,\n      width: $8USmO$contentfulf36tokens.spacingL,\n      '&:hover': {\n        backgroundColor: $8USmO$contentfulf36tokens.gray200\n      },\n      '&:focus': {\n        boxShadow: $8USmO$contentfulf36tokens.glowPrimary\n      },\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset'\n      },\n      '&:focus-visible': {\n        boxShadow: $8USmO$contentfulf36tokens.glowPrimary\n      }\n    }), (isActive || isFocused || isHovered) && /*#__PURE__*/$8USmO$css({\n      backgroundColor: $8USmO$contentfulf36tokens.gray200,\n      cursor: isActive ? 'grabbing' : 'grab'\n    }));\n  }\n}); //\n// The other alternative way to fix it was to pass a custom `shouldCancelStart` callback,\n// in every place where we use this component with react-sortable-hoc.\n// (the custom callback with all the logic from default callback, but without button event cancelation).\n// So we decided that just changing it to the div, as it was in v3, is a better fix.\n//\n// default shouldCancelStart callback:\n// https://github.com/clauderic/react-sortable-hoc/blob/d94ba3cc67cfc7d6d460b585e7723bdb50015e53/src/SortableContainer/defaultShouldCancelStart.js\n\n\nconst $0d6e001a91dc675e$var$DRAG_HANDLE_DEFAULT_TAG = 'div';\n\nfunction $0d6e001a91dc675e$var$_DragHandle(props, ref) {\n  const styles = $1282af47e008eae6$export$ffd58b7f6f099a57();\n  const {\n    as = $0d6e001a91dc675e$var$DRAG_HANDLE_DEFAULT_TAG,\n    className: className,\n    isActive: isActive,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    label: label,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    testId = 'cf-ui-drag-handle',\n    style: style,\n    ...otherProps\n  } = props;\n  const [isFocused, setisFocused] = $8USmO$useState(isFocusedProp);\n  const [isHovered, setisHovered] = $8USmO$useState(isHoveredProp);\n  const handleFocus = $8USmO$useCallback(event => {\n    setisFocused(true);\n    if (onFocus) onFocus(event);\n  }, [onFocus]);\n  const handleBlur = $8USmO$useCallback(event => {\n    setisFocused(false);\n    if (onBlur) onBlur(event);\n  }, [onBlur]);\n  const handleMouseEnter = $8USmO$useCallback(event => {\n    setisHovered(true);\n    if (onMouseEnter) onMouseEnter(event);\n  }, [onMouseEnter]);\n  const handleMouseLeave = $8USmO$useCallback(event => {\n    setisHovered(false);\n    if (onMouseLeave) onMouseLeave(event);\n  }, [onMouseLeave]);\n  const commonProps = {\n    className: $8USmO$cx(styles.root({\n      isActive: isActive,\n      isFocused: isFocused,\n      isHovered: isHovered\n    }), className),\n    'data-test-id': testId,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref: ref,\n    style: style\n  };\n  if (as === 'div') return /*#__PURE__*/$8USmO$react.createElement(\"div\", { ...otherProps,\n    ...commonProps,\n    role: \"button\",\n    tabIndex: 0\n  }, /*#__PURE__*/$8USmO$react.createElement($8USmO$DragIcon, {\n    variant: \"muted\"\n  }), /*#__PURE__*/$8USmO$react.createElement(\"span\", {\n    className: styles.label\n  }, label));\n  return /*#__PURE__*/$8USmO$react.createElement(\"button\", { ...otherProps,\n    ...commonProps,\n    type: \"button\"\n  }, /*#__PURE__*/$8USmO$react.createElement($8USmO$DragIcon, {\n    variant: \"muted\"\n  }), /*#__PURE__*/$8USmO$react.createElement(\"span\", {\n    className: styles.label\n  }, label));\n}\n\nconst $0d6e001a91dc675e$export$a0c24614540b0efb = /*#__PURE__*/$8USmO$react.forwardRef($0d6e001a91dc675e$var$_DragHandle);\nexport { $0d6e001a91dc675e$export$a0c24614540b0efb as DragHandle };","map":{"version":3,"mappings":"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","names":["getStyles","label","$8USmO$css","name","styles","root","isActive","isFocused","isHovered","$8USmO$cx","alignItems","backgroundColor","tokens","gray100","border","borderBottomLeftRadius","borderRadiusMedium","borderRight","gray200","borderTopLeftRadius","boxSizing","display","justifyContent","padding","position","transition","transitionDurationDefault","transitionEasingDefault","width","spacingL","boxShadow","glowPrimary","cursor","DRAG_HANDLE_DEFAULT_TAG","_DragHandle","props","ref","as","className","isFocusedProp","isHoveredProp","onBlur","onFocus","onMouseEnter","onMouseLeave","testId","style","otherProps","setisFocused","useState","setisHovered","handleFocus","useCallback","event","handleBlur","handleMouseEnter","handleMouseLeave","commonProps","$8USmO$react","role","tabIndex","$8USmO$DragIcon","variant","type","DragHandle","React","forwardRef"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-drag-handle/dist/packages/components/drag-handle/src/DragHandle.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-drag-handle/dist/packages/components/drag-handle/src/DragHandle.tsx"],"sourcesContent":["import { cx, css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = () => ({\n  label: css({\n    position: 'absolute',\n    width: '1px',\n    height: '1px',\n    padding: 0,\n    margin: '-1px',\n    overflow: 'hidden',\n    clip: 'rect(0, 0, 0, 0)',\n    border: 0,\n  }),\n  root: ({\n    isActive,\n    isFocused,\n    isHovered,\n  }: {\n    isActive: boolean;\n    isFocused: boolean;\n    isHovered: boolean;\n  }) => {\n    return cx(\n      css({\n        alignItems: 'center',\n        backgroundColor: tokens.gray100,\n        border: 0,\n        borderBottomLeftRadius: tokens.borderRadiusMedium,\n        borderRight: `1px solid ${tokens.gray200}`,\n        borderTopLeftRadius: tokens.borderRadiusMedium,\n        boxSizing: 'border-box',\n        display: 'flex',\n        justifyContent: 'center',\n        padding: 0,\n        position: 'relative',\n        transition: `background-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n        width: tokens.spacingL,\n        '&:hover': {\n          backgroundColor: tokens.gray200,\n        },\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      }),\n      (isActive || isFocused || isHovered) &&\n        css({\n          backgroundColor: tokens.gray200,\n          cursor: isActive ? 'grabbing' : 'grab',\n        }),\n    );\n  },\n});\n","import React, { useCallback, useState } from 'react';\nimport type {\n  /* ElementRef, */\n  ElementType,\n  FocusEventHandler,\n  MouseEventHandler,\n  Ref,\n} from 'react';\nimport { cx } from 'emotion';\nimport type {\n  PolymorphicComponent,\n  PolymorphicProps,\n} from '@contentful/f36-core';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { DragIcon } from '@contentful/f36-icons';\nimport { getStyles } from './DragHandle.styles';\n\n// We use div instead of a button because react-sortable-hoc lib cancels sorting if the event target is button.\n//\n// The other alternative way to fix it was to pass a custom `shouldCancelStart` callback,\n// in every place where we use this component with react-sortable-hoc.\n// (the custom callback with all the logic from default callback, but without button event cancelation).\n// So we decided that just changing it to the div, as it was in v3, is a better fix.\n//\n// default shouldCancelStart callback:\n// https://github.com/clauderic/react-sortable-hoc/blob/d94ba3cc67cfc7d6d460b585e7723bdb50015e53/src/SortableContainer/defaultShouldCancelStart.js\nconst DRAG_HANDLE_DEFAULT_TAG = 'div';\n\nexport interface DragHandleInternalProps extends CommonProps {\n  /**\n   * The element used for the root node\n   * @default div\n   */\n  as?: 'button' | 'div';\n  /**\n   * Applies styling for when the component is actively being dragged by\n   * the user\n   */\n  isActive?: boolean;\n  /**\n   * Applies focus styling\n   */\n  isFocused?: boolean;\n  /**\n   * Applies hover styling\n   */\n  isHovered?: boolean;\n  /**\n   * Label rendered in DragHandle - not visible on screen as its purpose\n   * is for screen readers only\n   */\n  label: string;\n  /**\n   * Set type button for div element\n   */\n  type?: string;\n}\n\nexport type DragHandleProps<\n  E extends ElementType = typeof DRAG_HANDLE_DEFAULT_TAG\n> = PolymorphicProps<DragHandleInternalProps, E>;\n\nfunction _DragHandle<E extends ElementType = typeof DRAG_HANDLE_DEFAULT_TAG>(\n  props: DragHandleProps<E>,\n  ref: Ref<any>,\n) {\n  const styles = getStyles();\n  const {\n    as = DRAG_HANDLE_DEFAULT_TAG,\n    className,\n    isActive,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    label,\n    onBlur,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    testId = 'cf-ui-drag-handle',\n    style,\n    ...otherProps\n  } = props;\n  const [isFocused, setisFocused] = useState(isFocusedProp);\n  const [isHovered, setisHovered] = useState(isHoveredProp);\n\n  const handleFocus = useCallback<FocusEventHandler<HTMLElement>>(\n    (event) => {\n      setisFocused(true);\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleBlur = useCallback<FocusEventHandler<HTMLElement>>(\n    (event) => {\n      setisFocused(false);\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    [onBlur],\n  );\n\n  const handleMouseEnter = useCallback<MouseEventHandler<HTMLElement>>(\n    (event) => {\n      setisHovered(true);\n\n      if (onMouseEnter) {\n        onMouseEnter(event);\n      }\n    },\n    [onMouseEnter],\n  );\n\n  const handleMouseLeave = useCallback<MouseEventHandler<HTMLElement>>(\n    (event) => {\n      setisHovered(false);\n\n      if (onMouseLeave) {\n        onMouseLeave(event);\n      }\n    },\n    [onMouseLeave],\n  );\n\n  const commonProps = {\n    className: cx(styles.root({ isActive, isFocused, isHovered }), className),\n    'data-test-id': testId,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref,\n    style,\n  };\n\n  if (as === 'div') {\n    return (\n      <div {...otherProps} {...commonProps} role=\"button\" tabIndex={0}>\n        <DragIcon variant=\"muted\" />\n        <span className={styles.label}>{label}</span>\n      </div>\n    );\n  }\n\n  return (\n    <button {...otherProps} {...commonProps} type=\"button\">\n      <DragIcon variant=\"muted\" />\n      <span className={styles.label}>{label}</span>\n    </button>\n  );\n}\n\nexport const DragHandle: PolymorphicComponent<\n  ExpandProps<DragHandleInternalProps>,\n  typeof DRAG_HANDLE_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_DragHandle);\n"]},"metadata":{},"sourceType":"module"}