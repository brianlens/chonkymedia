{"ast":null,"code":"import { cx as $7oe8x$cx, css as $7oe8x$css } from \"emotion\";\nimport $7oe8x$react, { useState as $7oe8x$useState, useCallback as $7oe8x$useCallback } from \"react\";\nimport { useCombobox as $7oe8x$useCombobox } from \"downshift\";\nimport { mergeRefs as $7oe8x$mergeRefs } from \"@contentful/f36-core\";\nimport { IconButton as $7oe8x$IconButton } from \"@contentful/f36-button\";\nimport { TextInput as $7oe8x$TextInput } from \"@contentful/f36-forms\";\nimport { CloseIcon as $7oe8x$CloseIcon, ChevronDownIcon as $7oe8x$ChevronDownIcon } from \"@contentful/f36-icons\";\nimport { SkeletonContainer as $7oe8x$SkeletonContainer, SkeletonBodyText as $7oe8x$SkeletonBodyText } from \"@contentful/f36-skeleton\";\nimport { Popover as $7oe8x$Popover } from \"@contentful/f36-popover\";\nimport { Subheading as $7oe8x$Subheading, SectionHeading as $7oe8x$SectionHeading, Text as $7oe8x$Text } from \"@contentful/f36-typography\";\nimport { getStringMatch as $7oe8x$getStringMatch } from \"@contentful/f36-utils\";\nimport $7oe8x$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $b76be67e84921f58$export$71b73d9f7d678746 = listMaxHeight => ({\n  autocomplete: /*#__PURE__*/$7oe8x$css({\n    name: \"1jke4yk\",\n    styles: \"position:relative;width:100%;\"\n  }),\n  combobox: /*#__PURE__*/$7oe8x$css({\n    name: \"79elbk\",\n    styles: \"position:relative;\"\n  }),\n  inputField: /*#__PURE__*/$7oe8x$css({\n    paddingRight: $7oe8x$contentfulf36tokens.spacingXl,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n  }),\n  toggleButton: /*#__PURE__*/$7oe8x$css({\n    position: 'absolute',\n    top: '1px',\n    right: '1px',\n    zIndex: 1,\n    padding: $7oe8x$contentfulf36tokens.spacing2Xs,\n    height: '38px'\n  }),\n  content: /*#__PURE__*/$7oe8x$css({\n    overflow: 'auto',\n    maxHeight: `${listMaxHeight}px`\n  }),\n  list: /*#__PURE__*/$7oe8x$css({\n    listStyle: 'none',\n    padding: `${$7oe8x$contentfulf36tokens.spacingXs} 0`,\n    margin: 0\n  }),\n  groupTitle: /*#__PURE__*/$7oe8x$css({\n    padding: `${$7oe8x$contentfulf36tokens.spacingXs} ${$7oe8x$contentfulf36tokens.spacingM}`,\n    lineHeight: $7oe8x$contentfulf36tokens.lineHeightM\n  }),\n  noMatchesTitle: /*#__PURE__*/$7oe8x$css({\n    color: $7oe8x$contentfulf36tokens.gray500,\n    margin: `${$7oe8x$contentfulf36tokens.spacingM} 0 ${$7oe8x$contentfulf36tokens.spacingM} 0`\n  }),\n  item: /*#__PURE__*/$7oe8x$css({\n    display: 'block',\n    padding: `${$7oe8x$contentfulf36tokens.spacingXs} ${$7oe8x$contentfulf36tokens.spacingM}`,\n    wordBreak: 'break-word',\n    whiteSpace: 'break-spaces',\n    cursor: 'pointer',\n    hyphens: 'auto',\n    '&:focus, &:hover': {\n      backgroundColor: $7oe8x$contentfulf36tokens.gray100\n    },\n    '&:active': {\n      backgroundColor: $7oe8x$contentfulf36tokens.gray200\n    }\n  }),\n  disabled: /*#__PURE__*/$7oe8x$css({\n    name: \"1e07izz\",\n    styles: \"opacity:0.5;pointer-events:none;\"\n  }),\n  highlighted: /*#__PURE__*/$7oe8x$css({\n    backgroundColor: $7oe8x$contentfulf36tokens.gray100\n  })\n});\n\nconst $641c6dc49f14cfd8$export$4db5c29873bb228f = props => {\n  const {\n    items: items,\n    elementStartIndex: elementStartIndex,\n    highlightedIndex: highlightedIndex,\n    getItemProps: getItemProps,\n    renderItem: renderItem,\n    inputValue: inputValue,\n    listMaxHeight = 180\n  } = props;\n  const styles = $b76be67e84921f58$export$71b73d9f7d678746(listMaxHeight);\n  return /*#__PURE__*/$7oe8x$react.createElement(\"ul\", {\n    className: styles.list,\n    \"data-test-id\": \"cf-autocomplete-list\"\n  }, items.map((item, index) => {\n    const itemIndex = elementStartIndex + index;\n    const itemProps = getItemProps({\n      item: item,\n      index: itemIndex\n    });\n    return /*#__PURE__*/$7oe8x$react.createElement($7oe8x$Text, { ...itemProps,\n      as: \"li\",\n      key: itemIndex,\n      className: $7oe8x$cx([styles.item, highlightedIndex === itemIndex && styles.highlighted]),\n      \"data-test-id\": `cf-autocomplete-list-item-${itemIndex}`\n    }, renderItem ? renderItem(item, inputValue) : typeof item === 'string' ? /*#__PURE__*/$7oe8x$react.createElement($641c6dc49f14cfd8$var$HighlightedItem, {\n      item: item,\n      inputValue: inputValue\n    }) : item);\n  }));\n};\n\n$641c6dc49f14cfd8$export$4db5c29873bb228f.displayName = 'AutocompleteItems';\n\nfunction $641c6dc49f14cfd8$var$HighlightedItem(_ref) {\n  let {\n    item: item,\n    inputValue: inputValue\n  } = _ref;\n  const {\n    before: before,\n    match: match,\n    after: after\n  } = $7oe8x$getStringMatch(item, inputValue);\n  return /*#__PURE__*/$7oe8x$react.createElement($7oe8x$react.Fragment, null, before, /*#__PURE__*/$7oe8x$react.createElement(\"b\", null, match), after);\n}\n\n$641c6dc49f14cfd8$var$HighlightedItem.displayName = 'HighlightedItem';\n\nfunction $7cd5ba9838c72bf9$var$_Autocomplete(props, ref) {\n  const {\n    id: id,\n    className: className,\n    clearAfterSelect = false,\n    defaultValue = '',\n    selectedItem: selectedItem1,\n    items: items,\n    onInputValueChange: onInputValueChange,\n    onSelectItem: onSelectItem,\n    renderItem: renderItem,\n    itemToString = item => item,\n    isInvalid: isInvalid,\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    isReadOnly: isReadOnly,\n    noMatchesMessage = 'No matches found',\n    placeholder = 'Search',\n    inputRef: inputRef,\n    toggleRef: toggleRef,\n    listRef: listRef,\n    listWidth = 'auto',\n    listMaxHeight = 180,\n    isGrouped = false,\n    isLoading = false,\n    usePortal = false,\n    testId = 'cf-autocomplete'\n  } = props;\n  const styles = $b76be67e84921f58$export$71b73d9f7d678746(listMaxHeight);\n  const [inputValue1, setInputValue] = $7oe8x$useState(defaultValue);\n  const handleInputValueChange = $7oe8x$useCallback(value => {\n    setInputValue(value);\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange(value);\n  }, [onInputValueChange]); // Handle manually to avoid a jumping cursor, see https://github.com/downshift-js/downshift/issues/1108#issuecomment-842407759\n\n  const handleNativeChangeEvent = $7oe8x$useCallback(event => {\n    const value = event.target.value;\n    handleInputValueChange(value);\n  }, [handleInputValueChange]);\n  const flattenItems = $7cd5ba9838c72bf9$var$isUsingGroups(isGrouped, items) ? items.reduce((acc, group) => [...acc, ...group.options], []) : items;\n  const isShowingNoMatches = $7cd5ba9838c72bf9$var$isUsingGroups(isGrouped, items) ? items.every(group => group.options.length === 0) : items.length === 0;\n  const {\n    getComboboxProps: getComboboxProps,\n    getInputProps: getInputProps,\n    getItemProps: getItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    toggleMenu: toggleMenu\n  } = $7oe8x$useCombobox({\n    items: flattenItems,\n    selectedItem: selectedItem1,\n    inputValue: inputValue1,\n    itemToString: itemToString,\n    onInputValueChange: _ref2 => {\n      let {\n        type: type,\n        inputValue: inputValue\n      } = _ref2;\n      if (type !== '__input_change__') handleInputValueChange(inputValue);\n    },\n    onStateChange: _ref3 => {\n      let {\n        type: type,\n        selectedItem: selectedItem\n      } = _ref3;\n\n      switch (type) {\n        case $7oe8x$useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case $7oe8x$useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) onSelectItem(selectedItem);\n          if (clearAfterSelect) handleInputValueChange('');\n          break;\n\n        default:\n          break;\n      }\n    }\n  });\n  const {\n    'aria-labelledby': _labelledby,\n    id: _inputId,\n    ...inputProps\n  } = getInputProps();\n  const comboboxProps = getComboboxProps();\n  const toggleProps = getToggleButtonProps();\n  const menuProps = getMenuProps();\n  let elementStartIndex = 0;\n  return /*#__PURE__*/$7oe8x$react.createElement(\"div\", {\n    \"data-test-id\": testId,\n    className: $7oe8x$cx(styles.autocomplete, className),\n    ref: ref\n  }, /*#__PURE__*/$7oe8x$react.createElement($7oe8x$Popover, {\n    usePortal: usePortal,\n    isOpen: isOpen,\n    isFullWidth: listWidth === 'full',\n    renderOnlyWhenOpen: false,\n    // and the user won't be able to type in the input\n    // eslint-disable-next-line jsx-a11y/no-autofocus\n    autoFocus: false,\n    id: menuProps.id\n  }, /*#__PURE__*/$7oe8x$react.createElement($7oe8x$Popover.Trigger, null, /*#__PURE__*/$7oe8x$react.createElement(\"div\", { ...comboboxProps,\n    className: styles.combobox\n  }, /*#__PURE__*/$7oe8x$react.createElement($7oe8x$TextInput, {\n    className: styles.inputField,\n    ...inputProps,\n    onFocus: () => {\n      if (!isOpen) toggleMenu();\n    },\n    id: id,\n    isInvalid: isInvalid,\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    isReadOnly: isReadOnly,\n    ref: $7oe8x$mergeRefs(inputProps.ref, inputRef),\n    testId: \"cf-autocomplete-input\",\n    placeholder: placeholder,\n    onChange: event => {\n      inputProps.onChange(event);\n      handleNativeChangeEvent(event);\n    }\n  }), /*#__PURE__*/$7oe8x$react.createElement($7oe8x$IconButton, { ...toggleProps,\n    ref: $7oe8x$mergeRefs(toggleProps.ref, toggleRef),\n    \"aria-label\": \"toggle menu\",\n    className: styles.toggleButton,\n    variant: \"transparent\",\n    icon: inputValue1 ? /*#__PURE__*/$7oe8x$react.createElement($7oe8x$CloseIcon, {\n      \"aria-label\": \"Clear\",\n      variant: \"muted\"\n    }) : /*#__PURE__*/$7oe8x$react.createElement($7oe8x$ChevronDownIcon, {\n      \"aria-label\": \"Show list\",\n      variant: \"muted\"\n    }),\n    onClick: () => {\n      if (inputValue1) handleInputValueChange('');else toggleMenu();\n    },\n    isDisabled: isDisabled,\n    size: \"small\"\n  }))), /*#__PURE__*/$7oe8x$react.createElement($7oe8x$Popover.Content, { ...menuProps,\n    ref: $7oe8x$mergeRefs(menuProps.ref, listRef),\n    className: styles.content,\n    testId: \"cf-autocomplete-container\"\n  }, isLoading && [...Array(3)].map((_, index) => /*#__PURE__*/$7oe8x$react.createElement(\"div\", {\n    key: index,\n    className: $7oe8x$cx(styles.item, styles.disabled)\n  }, /*#__PURE__*/$7oe8x$react.createElement($7cd5ba9838c72bf9$var$ListItemLoadingState, null))), !isLoading && isShowingNoMatches && /*#__PURE__*/$7oe8x$react.createElement(\"div\", {\n    className: styles.item\n  }, /*#__PURE__*/$7oe8x$react.createElement($7oe8x$Subheading, {\n    className: styles.noMatchesTitle\n  }, noMatchesMessage)), !isLoading && $7cd5ba9838c72bf9$var$isUsingGroups(isGrouped, items) && items.map((group, index) => {\n    if (group.options.length < 1) return;\n    const render = /*#__PURE__*/$7oe8x$react.createElement(\"div\", {\n      key: index\n    }, /*#__PURE__*/$7oe8x$react.createElement($7oe8x$SectionHeading, {\n      key: index,\n      \"data-test-id\": \"cf-autocomplete-grouptitle\",\n      marginBottom: \"none\",\n      className: styles.groupTitle\n    }, group.groupTitle), /*#__PURE__*/$7oe8x$react.createElement($641c6dc49f14cfd8$export$4db5c29873bb228f, {\n      items: group.options,\n      highlightedIndex: highlightedIndex,\n      getItemProps: getItemProps,\n      renderItem: renderItem,\n      inputValue: inputValue1,\n      elementStartIndex: elementStartIndex\n    }));\n    elementStartIndex += group.options.length;\n    return render;\n  }), !isLoading && !$7cd5ba9838c72bf9$var$isUsingGroups(isGrouped, items) && items.length > 0 && /*#__PURE__*/$7oe8x$react.createElement($641c6dc49f14cfd8$export$4db5c29873bb228f, {\n    items: items,\n    elementStartIndex: elementStartIndex,\n    highlightedIndex: highlightedIndex,\n    getItemProps: getItemProps,\n    renderItem: renderItem,\n    inputValue: inputValue1\n  }))));\n}\n\nconst $7cd5ba9838c72bf9$var$ListItemLoadingState = () => {\n  return /*#__PURE__*/$7oe8x$react.createElement($7oe8x$SkeletonContainer, {\n    svgHeight: 16\n  }, /*#__PURE__*/$7oe8x$react.createElement($7oe8x$SkeletonBodyText, {\n    numberOfLines: 1\n  }));\n}; // This is required to infer correct typings when differentiating groups and items\n\n\nfunction $7cd5ba9838c72bf9$var$isUsingGroups(isGrouped, items) {\n  return isGrouped;\n}\n\nconst $7cd5ba9838c72bf9$export$2f2b9559550c7bbc = /*#__PURE__*/$7oe8x$react.forwardRef($7cd5ba9838c72bf9$var$_Autocomplete);\nexport { $7cd5ba9838c72bf9$export$2f2b9559550c7bbc as Autocomplete };","map":{"version":3,"mappings":"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","names":["getAutocompleteStyles","listMaxHeight","autocomplete","$7oe8x$css","name","styles","combobox","inputField","paddingRight","tokens","spacingXl","textOverflow","whiteSpace","toggleButton","position","top","right","zIndex","padding","spacing2Xs","height","content","overflow","maxHeight","list","listStyle","spacingXs","margin","groupTitle","spacingM","lineHeight","lineHeightM","noMatchesTitle","color","gray500","item","display","wordBreak","cursor","hyphens","backgroundColor","gray100","gray200","disabled","highlighted","AutocompleteItems","props","items","elementStartIndex","highlightedIndex","getItemProps","renderItem","inputValue","$7oe8x$react","className","map","index","itemIndex","itemProps","$7oe8x$Text","as","key","$7oe8x$cx","$641c6dc49f14cfd8$var$HighlightedItem","displayName","HighlightedItem","before","match","after","getStringMatch","_Autocomplete","ref","id","clearAfterSelect","defaultValue","selectedItem","onInputValueChange","onSelectItem","itemToString","isInvalid","isDisabled","isRequired","isReadOnly","noMatchesMessage","placeholder","inputRef","toggleRef","listRef","listWidth","isGrouped","isLoading","usePortal","testId","setInputValue","useState","handleInputValueChange","useCallback","value","handleNativeChangeEvent","event","target","flattenItems","isUsingGroups","reduce","acc","group","options","isShowingNoMatches","every","length","getComboboxProps","getInputProps","getMenuProps","getToggleButtonProps","isOpen","toggleMenu","useCombobox","type","onStateChange","stateChangeTypes","InputKeyDownEnter","ItemClick","_labelledby","_inputId","inputProps","comboboxProps","toggleProps","menuProps","$7oe8x$Popover","isFullWidth","renderOnlyWhenOpen","autoFocus","Trigger","$7oe8x$TextInput","onFocus","mergeRefs","onChange","$7oe8x$IconButton","variant","icon","$7oe8x$CloseIcon","$7oe8x$ChevronDownIcon","onClick","size","Content","Array","_","$7cd5ba9838c72bf9$var$ListItemLoadingState","$7oe8x$Subheading","render","$7oe8x$SectionHeading","marginBottom","$641c6dc49f14cfd8$export$4db5c29873bb228f","ListItemLoadingState","$7oe8x$SkeletonContainer","svgHeight","$7oe8x$SkeletonBodyText","numberOfLines","Autocomplete","React","forwardRef"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-autocomplete/dist/packages/components/autocomplete/src/Autocomplete.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-autocomplete/dist/packages/components/autocomplete/src/AutocompleteItems.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-autocomplete/dist/packages/components/autocomplete/src/Autocomplete.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAutocompleteStyles = (listMaxHeight: number) => ({\n  autocomplete: css({\n    position: 'relative',\n    width: '100%',\n  }),\n  combobox: css({\n    position: 'relative',\n  }),\n  inputField: css({\n    paddingRight: tokens.spacingXl,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n  toggleButton: css({\n    position: 'absolute',\n    top: '1px',\n    right: '1px',\n    zIndex: 1,\n    padding: tokens.spacing2Xs,\n    height: '38px',\n  }),\n  content: css({\n    overflow: 'auto',\n    maxHeight: `${listMaxHeight}px`,\n  }),\n  list: css({\n    listStyle: 'none',\n    padding: `${tokens.spacingXs} 0`,\n    margin: 0,\n  }),\n  groupTitle: css({\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    lineHeight: tokens.lineHeightM,\n  }),\n  noMatchesTitle: css({\n    color: tokens.gray500,\n    margin: `${tokens.spacingM} 0 ${tokens.spacingM} 0`,\n  }),\n  item: css({\n    display: 'block',\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    wordBreak: 'break-word',\n    whiteSpace: 'break-spaces',\n    cursor: 'pointer',\n    hyphens: 'auto',\n\n    '&:focus, &:hover': {\n      backgroundColor: tokens.gray100,\n    },\n    '&:active': {\n      backgroundColor: tokens.gray200,\n    },\n  }),\n  disabled: css({\n    opacity: 0.5,\n    pointerEvents: 'none',\n  }),\n  highlighted: css({\n    backgroundColor: tokens.gray100,\n  }),\n});\n","import React, { HTMLAttributes } from 'react';\nimport { cx } from 'emotion';\n\nimport { getStringMatch } from '@contentful/f36-utils';\nimport { Text } from '@contentful/f36-typography';\nimport { getAutocompleteStyles } from './Autocomplete.styles';\nimport type { UseComboboxGetItemPropsOptions } from 'downshift';\n\ninterface AutocompleteItemsProps<ItemType> {\n  items: ItemType[];\n  elementStartIndex: number;\n  highlightedIndex: number;\n  getItemProps: (\n    options: UseComboboxGetItemPropsOptions<ItemType>,\n  ) => HTMLAttributes<HTMLLIElement>;\n  renderItem: (item: ItemType, inputValue: string) => React.ReactNode;\n  inputValue: string;\n  listMaxHeight?: number;\n}\n\nexport const AutocompleteItems = <ItemType,>(\n  props: AutocompleteItemsProps<ItemType>,\n) => {\n  const {\n    items,\n    elementStartIndex,\n    highlightedIndex,\n    getItemProps,\n    renderItem,\n    inputValue,\n    listMaxHeight = 180,\n  } = props;\n\n  const styles = getAutocompleteStyles(listMaxHeight);\n\n  return (\n    <ul className={styles.list} data-test-id=\"cf-autocomplete-list\">\n      {items.map((item: ItemType, index: number) => {\n        const itemIndex = elementStartIndex + index;\n        const itemProps = getItemProps({ item, index: itemIndex });\n        return (\n          <Text\n            {...itemProps}\n            as=\"li\"\n            key={itemIndex}\n            className={cx([\n              styles.item,\n              highlightedIndex === itemIndex && styles.highlighted,\n            ])}\n            data-test-id={`cf-autocomplete-list-item-${itemIndex}`}\n          >\n            {renderItem ? (\n              renderItem(item, inputValue)\n            ) : typeof item === 'string' ? (\n              <HighlightedItem item={item} inputValue={inputValue} />\n            ) : (\n              item\n            )}\n          </Text>\n        );\n      })}\n    </ul>\n  );\n};\n\nAutocompleteItems.displayName = 'AutocompleteItems';\n\nfunction HighlightedItem({\n  item,\n  inputValue,\n}: {\n  item: string;\n  inputValue: string;\n}) {\n  const { before, match, after } = getStringMatch(item, inputValue);\n\n  return (\n    <>\n      {before}\n      <b>{match}</b>\n      {after}\n    </>\n  );\n}\n\nHighlightedItem.displayName = 'HighlightedItem';\n","import React, { useCallback, useState } from 'react';\nimport { cx } from 'emotion';\nimport { useCombobox } from 'downshift';\n\nimport { mergeRefs } from '@contentful/f36-core';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { IconButton } from '@contentful/f36-button';\nimport { TextInput } from '@contentful/f36-forms';\nimport type { TextInputProps } from '@contentful/f36-forms';\nimport { CloseIcon, ChevronDownIcon } from '@contentful/f36-icons';\nimport { SkeletonContainer, SkeletonBodyText } from '@contentful/f36-skeleton';\nimport { Popover } from '@contentful/f36-popover';\nimport { Subheading, SectionHeading } from '@contentful/f36-typography';\n\nimport { AutocompleteItems } from './AutocompleteItems';\nimport { getAutocompleteStyles } from './Autocomplete.styles';\n\nexport interface GenericGroupType<ItemType> {\n  groupTitle: string;\n  options: ItemType[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface AutocompleteProps<ItemType>\n  extends CommonProps,\n    Pick<\n      TextInputProps,\n      | 'isDisabled'\n      | 'isInvalid'\n      | 'isReadOnly'\n      | 'isRequired'\n      | 'id'\n      | 'defaultValue'\n    > {\n  /**\n   * It’s an array of data to be used as \"options\" by the autocomplete component.\n   * This can either be a plain list of items or a list of groups of items.\n   */\n  items: ItemType[] | GenericGroupType<ItemType>[];\n\n  /**\n   * Tells if the item is a object with groups\n   */\n  isGrouped?: boolean;\n\n  /**\n   * Function called whenever the input value changes\n   */\n  onInputValueChange?: (value: string) => void;\n  /**\n   * This is the function that will be called when the user selects one of the \"options\" in the list.\n   * The component will pass the selected \"item\" as an argument to the function..\n   */\n  onSelectItem: (item: ItemType) => void;\n\n  /**\n   * Applying the selectedItem property turns autocomplete into a controlled component.\n   * Can be used to display e.g. previously selected element. If it is an object the itemToString function will apply to it.\n   */\n  selectedItem?: ItemType;\n\n  /**\n   * This is the function that will be called for each \"item\" passed in the `items` prop.\n   * It receives the \"item\" and \"inputValue\" as arguments and returns a ReactNode.\n   * The inputValue is passed in case you want to highlight the match on the render.\n   */\n  renderItem?: (item: ItemType, inputValue: string) => React.ReactNode;\n  /**\n   * When using objects as `items`, we recommend passing a function that tells Downshift how to extract a string\n   * from those objetcs to be used as inputValue\n   */\n  itemToString?: (item: ItemType) => string;\n  /**\n   * If this is set to `true` the text input will be cleared after an item is selected\n   * @default false\n   */\n  clearAfterSelect?: boolean;\n  /**\n   * This is the value will be passed to the `placeholder` prop of the input.\n   * @default \"Search\"\n   */\n  placeholder?: string;\n  /**\n   * A message that will be shown when it is not possible to find any option that matches the input value\n   * @default \"No matches\"\n   */\n  noMatchesMessage?: string;\n  /**\n   * Use this prop to get a ref to the input element of the component\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Use this prop to get a ref to the toggle button of the component\n   */\n  toggleRef?: React.Ref<HTMLButtonElement>;\n  /**\n   * Use this prop to get a ref to the list of items of the component\n   */\n  listRef?: React.Ref<HTMLUListElement>;\n  /**\n   * It sets the width of the list\n   * @default \"auto\"\n   */\n  listWidth?: 'auto' | 'full';\n  /**\n   * It sets the max-height, in pixels, of the list\n   * The default value is the height of 5 single line items\n   * @default 180\n   */\n  listMaxHeight?: number;\n  /**\n   * Sets the list to show its loading state\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * Boolean to control whether or not to render the suggestions box in a React Portal.\n   * Rendering content inside a Portal allows the suggestions box to escape the bounds\n   * of its parent while still being positioned correctly.\n   * Defaults to `false`\n   */\n  usePortal?: boolean;\n}\n\nfunction _Autocomplete<ItemType>(\n  props: AutocompleteProps<ItemType>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    id,\n    className,\n    clearAfterSelect = false,\n    defaultValue = '',\n    selectedItem,\n    items,\n    onInputValueChange,\n    onSelectItem,\n    renderItem,\n    itemToString = (item: ItemType) => (item as unknown) as string,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n    noMatchesMessage = 'No matches found',\n    placeholder = 'Search',\n    inputRef,\n    toggleRef,\n    listRef,\n    listWidth = 'auto',\n    listMaxHeight = 180,\n    isGrouped = false,\n    isLoading = false,\n    usePortal = false,\n    testId = 'cf-autocomplete',\n  } = props;\n\n  type GroupType = GenericGroupType<ItemType>;\n\n  const styles = getAutocompleteStyles(listMaxHeight);\n\n  const [inputValue, setInputValue] = useState(defaultValue);\n\n  const handleInputValueChange = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      onInputValueChange?.(value);\n    },\n    [onInputValueChange],\n  );\n\n  // Handle manually to avoid a jumping cursor, see https://github.com/downshift-js/downshift/issues/1108#issuecomment-842407759\n  const handleNativeChangeEvent = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const value = event.target.value;\n      handleInputValueChange(value);\n    },\n    [handleInputValueChange],\n  );\n\n  const flattenItems = isUsingGroups(isGrouped, items)\n    ? items.reduce(\n        (acc: ItemType[], group: GroupType) => [...acc, ...group.options],\n        [],\n      )\n    : items;\n\n  const isShowingNoMatches = isUsingGroups(isGrouped, items)\n    ? items.every((group: GroupType) => group.options.length === 0)\n    : items.length === 0;\n\n  const {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    highlightedIndex,\n    isOpen,\n    toggleMenu,\n  } = useCombobox({\n    items: flattenItems,\n    selectedItem,\n    inputValue,\n    itemToString,\n    onInputValueChange: ({ type, inputValue }) => {\n      if (type !== '__input_change__') {\n        handleInputValueChange(inputValue);\n      }\n    },\n    onStateChange: ({ type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            onSelectItem(selectedItem);\n          }\n          if (clearAfterSelect) {\n            handleInputValueChange('');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n  });\n\n  const {\n    'aria-labelledby': _labelledby,\n    id: _inputId,\n    ...inputProps\n  } = getInputProps();\n  const comboboxProps = getComboboxProps();\n  const toggleProps = getToggleButtonProps();\n  const menuProps = getMenuProps();\n  let elementStartIndex = 0;\n\n  return (\n    <div\n      data-test-id={testId}\n      className={cx(styles.autocomplete, className)}\n      ref={ref}\n    >\n      <Popover\n        usePortal={usePortal}\n        isOpen={isOpen}\n        isFullWidth={listWidth === 'full'}\n        renderOnlyWhenOpen={false}\n        // This is necessary, otherwise the focus will change from the input to the Popover\n        // and the user won't be able to type in the input\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus={false}\n        id={menuProps.id}\n      >\n        <Popover.Trigger>\n          <div {...comboboxProps} className={styles.combobox}>\n            <TextInput\n              className={styles.inputField}\n              {...inputProps}\n              onFocus={() => {\n                if (!isOpen) {\n                  toggleMenu();\n                }\n              }}\n              id={id}\n              isInvalid={isInvalid}\n              isDisabled={isDisabled}\n              isRequired={isRequired}\n              isReadOnly={isReadOnly}\n              ref={mergeRefs(inputProps.ref, inputRef)}\n              testId=\"cf-autocomplete-input\"\n              placeholder={placeholder}\n              onChange={(event) => {\n                inputProps.onChange(event);\n                handleNativeChangeEvent(event);\n              }}\n            />\n            <IconButton\n              {...toggleProps}\n              ref={mergeRefs(toggleProps.ref, toggleRef)}\n              aria-label=\"toggle menu\"\n              className={styles.toggleButton}\n              variant=\"transparent\"\n              icon={\n                inputValue ? (\n                  <CloseIcon aria-label=\"Clear\" variant=\"muted\" />\n                ) : (\n                  <ChevronDownIcon aria-label=\"Show list\" variant=\"muted\" />\n                )\n              }\n              onClick={() => {\n                if (inputValue) {\n                  handleInputValueChange('');\n                } else {\n                  toggleMenu();\n                }\n              }}\n              isDisabled={isDisabled}\n              size=\"small\"\n            />\n          </div>\n        </Popover.Trigger>\n\n        <Popover.Content\n          {...menuProps}\n          ref={mergeRefs(menuProps.ref, listRef)}\n          className={styles.content}\n          testId=\"cf-autocomplete-container\"\n        >\n          {isLoading &&\n            [...Array(3)].map((_, index) => (\n              <div key={index} className={cx(styles.item, styles.disabled)}>\n                <ListItemLoadingState />\n              </div>\n            ))}\n\n          {!isLoading && isShowingNoMatches && (\n            <div className={styles.item}>\n              <Subheading className={styles.noMatchesTitle}>\n                {noMatchesMessage}\n              </Subheading>\n            </div>\n          )}\n\n          {!isLoading &&\n            isUsingGroups(isGrouped, items) &&\n            items.map((group: GroupType, index: number) => {\n              if (group.options.length < 1) {\n                return;\n              }\n              const render = (\n                <div key={index}>\n                  <SectionHeading\n                    key={index}\n                    data-test-id=\"cf-autocomplete-grouptitle\"\n                    marginBottom=\"none\"\n                    className={styles.groupTitle}\n                  >\n                    {group.groupTitle}\n                  </SectionHeading>\n                  <AutocompleteItems<ItemType>\n                    items={group.options}\n                    highlightedIndex={highlightedIndex}\n                    getItemProps={getItemProps}\n                    renderItem={renderItem}\n                    inputValue={inputValue}\n                    elementStartIndex={elementStartIndex}\n                  />\n                </div>\n              );\n              elementStartIndex += group.options.length;\n              return render;\n            })}\n\n          {!isLoading &&\n            !isUsingGroups(isGrouped, items) &&\n            items.length > 0 && (\n              <AutocompleteItems<ItemType>\n                items={items}\n                elementStartIndex={elementStartIndex}\n                highlightedIndex={highlightedIndex}\n                getItemProps={getItemProps}\n                renderItem={renderItem}\n                inputValue={inputValue}\n              />\n            )}\n        </Popover.Content>\n      </Popover>\n    </div>\n  );\n}\n\nconst ListItemLoadingState = () => {\n  return (\n    <SkeletonContainer svgHeight={16}>\n      <SkeletonBodyText numberOfLines={1} />\n    </SkeletonContainer>\n  );\n};\n\n// This is required to infer correct typings when differentiating groups and items\nfunction isUsingGroups<ItemType>(\n  isGrouped: boolean,\n  items: ItemType[] | GenericGroupType<ItemType>[],\n): items is GenericGroupType<ItemType>[] {\n  return isGrouped;\n}\n\n/**\n * The Autocomplete is a component that will show a `TextInput` where a user can type any word which will be used\n * to filter a list of items. That list of filtered items will be shown to the user as possible options for the input.\n * Once one of the options is selected, that option becomes the value of the `TextInput`.\n */\nexport const Autocomplete = React.forwardRef(_Autocomplete) as <T>(\n  props: ExpandProps<AutocompleteProps<T>> & {\n    ref?: React.Ref<HTMLDivElement>;\n  },\n) => ReturnType<typeof _Autocomplete>;\n"]},"metadata":{},"sourceType":"module"}