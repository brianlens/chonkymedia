{"ast":null,"code":"import { cx as $6t5Db$cx, css as $6t5Db$css } from \"emotion\";\nimport $6t5Db$react from \"react\";\nimport { Box as $6t5Db$Box } from \"@contentful/f36-core\";\nimport $6t5Db$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $8a1e33ed71d0ddeb$var$variantToStyles = _ref => {\n  let {\n    variant: variant\n  } = _ref;\n\n  switch (variant) {\n    case 'positive':\n      return {\n        color: $6t5Db$contentfulf36tokens.green600,\n        backgroundColor: $6t5Db$contentfulf36tokens.green200\n      };\n\n    case 'primary':\n      return {\n        color: $6t5Db$contentfulf36tokens.blue600,\n        backgroundColor: $6t5Db$contentfulf36tokens.blue200\n      };\n\n    case 'negative':\n      return {\n        color: $6t5Db$contentfulf36tokens.red600,\n        backgroundColor: $6t5Db$contentfulf36tokens.red200\n      };\n\n    case 'warning':\n      return {\n        color: $6t5Db$contentfulf36tokens.orange600,\n        backgroundColor: $6t5Db$contentfulf36tokens.orange200\n      };\n\n    case 'secondary':\n      return {\n        color: $6t5Db$contentfulf36tokens.gray700,\n        backgroundColor: $6t5Db$contentfulf36tokens.gray200\n      };\n\n    case 'primary-filled':\n      return {\n        color: $6t5Db$contentfulf36tokens.colorWhite,\n        backgroundColor: $6t5Db$contentfulf36tokens.blue600\n      };\n\n    case 'featured':\n      return {\n        color: $6t5Db$contentfulf36tokens.purple600,\n        backgroundColor: $6t5Db$contentfulf36tokens.purple200\n      };\n\n    default:\n      return {};\n  }\n};\n\nconst $8a1e33ed71d0ddeb$var$sizeToStyles = _ref2 => {\n  let {\n    size: size\n  } = _ref2;\n\n  switch (size) {\n    case 'small':\n      return {\n        padding: `3px ${$6t5Db$contentfulf36tokens.spacing2Xs}`,\n        fontSize: '0.625rem',\n        lineHeight: '0.625rem',\n        maxHeight: '16px'\n      };\n\n    default:\n      return {\n        padding: `0 ${$6t5Db$contentfulf36tokens.spacingXs}`,\n        fontSize: `calc(1rem * (12 / ${$6t5Db$contentfulf36tokens.fontBaseDefault}))`,\n        lineHeight: '20px',\n        maxHeight: '20px'\n      };\n  }\n};\n\nconst $8a1e33ed71d0ddeb$export$c9d43b5c20560398 = _ref3 => {\n  let {\n    variant: variant,\n    size: size\n  } = _ref3;\n  return /*#__PURE__*/$6t5Db$css({\n    fontFamily: $6t5Db$contentfulf36tokens.fontStackPrimary,\n    fontWeight: $6t5Db$contentfulf36tokens.fontWeightDemiBold,\n    textTransform: 'uppercase',\n    letterSpacing: '0.06rem',\n    borderRadius: `${$6t5Db$contentfulf36tokens.borderRadiusSmall}`,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    verticalAlign: 'middle',\n    ...$8a1e33ed71d0ddeb$var$variantToStyles({\n      variant: variant\n    }),\n    ...$8a1e33ed71d0ddeb$var$sizeToStyles({\n      size: size\n    })\n  });\n};\n\nconst $23fe874050de62bc$export$37acb3580601e69a = /*#__PURE__*/$6t5Db$react.forwardRef((props, ref) => {\n  const {\n    children: children,\n    variant = 'primary',\n    size = 'default',\n    testId = 'cf-ui-badge',\n    className: className,\n    ...otherProps\n  } = props;\n  return /*#__PURE__*/$6t5Db$react.createElement($6t5Db$Box, {\n    as: \"div\",\n    testId: testId,\n    display: \"inline-block\",\n    className: $6t5Db$cx($8a1e33ed71d0ddeb$export$c9d43b5c20560398({\n      variant: variant,\n      size: size\n    }), className),\n    ...otherProps,\n    ref: ref\n  }, children);\n});\n$23fe874050de62bc$export$37acb3580601e69a.displayName = 'Badge';\nconst $a23f6dc8cefcf8e1$var$statusMap = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'negative',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled'\n};\n\nfunction $a23f6dc8cefcf8e1$var$EntityStatusBadge(props, ref) {\n  const {\n    entityStatus: entityStatus,\n    ...otherProps\n  } = props;\n  const variant = $a23f6dc8cefcf8e1$var$statusMap[entityStatus];\n  return /*#__PURE__*/$6t5Db$react.createElement($23fe874050de62bc$export$37acb3580601e69a, { ...otherProps,\n    variant: variant,\n    ref: ref\n  }, entityStatus);\n}\n\n$a23f6dc8cefcf8e1$var$EntityStatusBadge.displayName = 'EntityStatusBadge';\nconst $a23f6dc8cefcf8e1$export$ab4ed1b313ef6d98 = /*#__PURE__*/$6t5Db$react.forwardRef($a23f6dc8cefcf8e1$var$EntityStatusBadge);\nexport { $23fe874050de62bc$export$37acb3580601e69a as Badge, $a23f6dc8cefcf8e1$export$ab4ed1b313ef6d98 as EntityStatusBadge };","map":{"version":3,"mappings":"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","names":["variantToStyles","variant","color","tokens","green600","backgroundColor","green200","blue600","blue200","red600","red200","orange600","orange200","gray700","gray200","colorWhite","purple600","purple200","sizeToStyles","size","padding","spacing2Xs","fontSize","lineHeight","maxHeight","spacingXs","fontBaseDefault","getBadgeStyles","$6t5Db$css","fontFamily","fontStackPrimary","fontWeight","fontWeightDemiBold","textTransform","letterSpacing","borderRadius","borderRadiusSmall","whiteSpace","overflow","textOverflow","verticalAlign","Badge","React","forwardRef","props","ref","children","testId","className","otherProps","$6t5Db$react","$6t5Db$Box","as","display","$6t5Db$cx","displayName","statusMap","published","draft","archived","changed","deleted","new","EntityStatusBadge","entityStatus","$23fe874050de62bc$export$37acb3580601e69a","_EntityStatusBadge"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-badge/dist/packages/components/badge/src/Badge/Badge.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-badge/dist/packages/components/badge/src/Badge/Badge.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-badge/dist/packages/components/badge/src/EntityStatusBadge/EntityStatusBadge.tsx"],"sourcesContent":["import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport type { BadgeVariant, BadgeSize } from '../types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst variantToStyles = ({ variant }: { variant: BadgeVariant }): CSSObject => {\n  switch (variant) {\n    case 'positive':\n      return {\n        color: tokens.green600,\n        backgroundColor: tokens.green200,\n      };\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        backgroundColor: tokens.blue200,\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.red200,\n      };\n    case 'warning':\n      return {\n        color: tokens.orange600,\n        backgroundColor: tokens.orange200,\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray700,\n        backgroundColor: tokens.gray200,\n      };\n    case 'primary-filled':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue600,\n      };\n    case 'featured':\n      return {\n        color: tokens.purple600,\n        backgroundColor: tokens.purple200,\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = ({ size }: { size: BadgeSize }): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        padding: `3px ${tokens.spacing2Xs}`,\n        fontSize: '0.625rem',\n        lineHeight: '0.625rem',\n        maxHeight: '16px',\n      };\n    default:\n      return {\n        padding: `0 ${tokens.spacingXs}`,\n        fontSize: `calc(1rem * (12 / ${tokens.fontBaseDefault}))`,\n        lineHeight: '20px',\n        maxHeight: '20px',\n      };\n  }\n};\n\nexport const getBadgeStyles = ({\n  variant,\n  size,\n}: {\n  variant: BadgeVariant;\n  size: BadgeSize;\n}) => {\n  return css({\n    fontFamily: tokens.fontStackPrimary,\n    fontWeight: tokens.fontWeightDemiBold,\n\n    textTransform: 'uppercase',\n    letterSpacing:\n      '0.06rem' /*move to tokens or update wide letter spacing token*/,\n    borderRadius: `${tokens.borderRadiusSmall}`,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    verticalAlign: 'middle',\n    ...variantToStyles({ variant }),\n    ...sizeToStyles({ size }),\n  });\n};\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nimport type { BadgeSize, BadgeVariant } from '../types';\nimport { getBadgeStyles } from './Badge.styles';\n\nexport interface BadgeInternalProps extends CommonProps {\n  /**\n   * Sets the size of the component\n   * @default default\n   */\n  size?: BadgeSize;\n  /**\n   * Determines the variation of the component\n   * @default primary\n   */\n  variant?: BadgeVariant;\n\n  children: React.ReactNode;\n}\n\nexport type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;\n\nexport const Badge = React.forwardRef<HTMLDivElement, ExpandProps<BadgeProps>>(\n  (props, ref) => {\n    const {\n      children,\n      variant = 'primary',\n      size = 'default',\n      testId = 'cf-ui-badge',\n      className,\n      ...otherProps\n    } = props;\n\n    return (\n      <Box\n        as=\"div\"\n        testId={testId}\n        display=\"inline-block\"\n        className={cx(getBadgeStyles({ variant, size }), className)}\n        {...otherProps}\n        ref={ref}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nBadge.displayName = 'Badge';\n","import React from 'react';\nimport type { EntityStatus, ExpandProps } from '@contentful/f36-core';\n\nimport { Badge } from '../Badge/Badge';\nimport type { BadgeProps } from '../Badge/Badge';\nimport type { BadgeVariant, BadgeSize } from '../types';\n\nconst statusMap: { [key in EntityStatus]: BadgeVariant } = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'negative',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled',\n};\n\nexport interface EntityStatusBadgeProps\n  extends Omit<BadgeProps, 'variant' | 'children'> {\n  size?: BadgeSize;\n  entityStatus: EntityStatus;\n}\n\nfunction EntityStatusBadge(\n  props: EntityStatusBadgeProps,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { entityStatus, ...otherProps } = props;\n  const variant = statusMap[entityStatus];\n  return (\n    <Badge {...otherProps} variant={variant} ref={ref}>\n      {entityStatus}\n    </Badge>\n  );\n}\n\nEntityStatusBadge.displayName = 'EntityStatusBadge';\n\nconst _EntityStatusBadge = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<EntityStatusBadgeProps>\n>(EntityStatusBadge);\nexport { _EntityStatusBadge as EntityStatusBadge };\n"]},"metadata":{},"sourceType":"module"}