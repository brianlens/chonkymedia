{"ast":null,"code":"import { cx as $dnnsg$cx, css as $dnnsg$css } from \"emotion\";\nimport $dnnsg$react, { useState as $dnnsg$useState, useRef as $dnnsg$useRef, useCallback as $dnnsg$useCallback } from \"react\";\nimport $dnnsg$reactcopytoclipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon as $dnnsg$CopyIcon } from \"@contentful/f36-icons\";\nimport { Tooltip as $dnnsg$Tooltip } from \"@contentful/f36-tooltip\";\nimport $dnnsg$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $c5d0896db030b9aa$export$ffd58b7f6f099a57 = _ref => {\n  let {\n    size: size\n  } = _ref;\n  const buttonSize = size === 'small' ? '32px' : '40px';\n  return {\n    wrapper: /*#__PURE__*/$dnnsg$css({\n      display: 'inline-block',\n      height: buttonSize,\n      position: 'relative',\n      width: buttonSize\n    }),\n    copyButton: /*#__PURE__*/$dnnsg$css({\n      alignItems: 'center',\n      background: $dnnsg$contentfulf36tokens.colorWhite,\n      border: `1px solid ${$dnnsg$contentfulf36tokens.gray300}`,\n      display: 'inline-flex',\n      height: '100%',\n      justifyContent: 'center',\n      outline: 'none',\n      padding: 0,\n      transition: `background ${$dnnsg$contentfulf36tokens.transitionDurationShort} ${$dnnsg$contentfulf36tokens.transitionEasingDefault}`,\n      width: '100%',\n      '&:hover': {\n        backgroundColor: $dnnsg$contentfulf36tokens.gray100,\n        cursor: 'pointer'\n      },\n      '&:active': {\n        backgroundColor: $dnnsg$contentfulf36tokens.gray200,\n        cursor: 'pointer'\n      },\n      '&:focus': {\n        boxShadow: $dnnsg$contentfulf36tokens.glowMuted\n      },\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset'\n      },\n      '&:focus-visible': {\n        boxShadow: $dnnsg$contentfulf36tokens.glowMuted\n      }\n    }),\n    copyButtonDisabled: /*#__PURE__*/$dnnsg$css({\n      cursor: 'not-allowed',\n      backgroundColor: $dnnsg$contentfulf36tokens.gray100,\n      '&:hover': {\n        cursor: 'not-allowed',\n        backgroundColor: $dnnsg$contentfulf36tokens.gray100\n      },\n      '&:focus': {\n        borderColor: $dnnsg$contentfulf36tokens.gray300,\n        boxShadow: 'none'\n      },\n      '&:active, &:active:hover': {\n        borderColor: $dnnsg$contentfulf36tokens.gray300,\n        boxShadow: 'none'\n      }\n    })\n  };\n};\n\nfunction $b6698237aa721326$var$_CopyButton(props, ref) {\n  const {\n    onCopy: onCopy,\n    value: value,\n    className: className,\n    testId = 'cf-ui-copy-button',\n    tooltipText = 'Copy to clipboard',\n    tooltipCopiedText = 'Copied!',\n    tooltipProps: tooltipProps,\n    isDisabled = false,\n    size = 'medium',\n    ...otherProps\n  } = props;\n  const styles = $c5d0896db030b9aa$export$ffd58b7f6f099a57({\n    size: size\n  });\n  const [copied, setCopied] = $dnnsg$useState(false);\n  const button = $dnnsg$useRef(null);\n  const handleOnCopy = $dnnsg$useCallback(e => {\n    if (onCopy) onCopy(e);\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n      if (button.current) button.current.blur();\n    }, 1000);\n  }, [onCopy]);\n  return /*#__PURE__*/$dnnsg$react.createElement(\"div\", {\n    ref: ref,\n    \"data-test-id\": testId,\n    className: $dnnsg$cx(styles.wrapper, className),\n    ...otherProps\n  }, /*#__PURE__*/$dnnsg$react.createElement($dnnsg$reactcopytoclipboard, {\n    text: value,\n    onCopy: handleOnCopy\n  }, /*#__PURE__*/$dnnsg$react.createElement($dnnsg$Tooltip, {\n    content: copied ? tooltipCopiedText : tooltipText,\n    ...tooltipProps,\n    isDisabled: isDisabled\n  }, /*#__PURE__*/$dnnsg$react.createElement(\"button\", {\n    type: \"button\",\n    ref: button,\n    className: $dnnsg$cx(styles.copyButton, {\n      [styles.copyButtonDisabled]: isDisabled\n    }),\n    \"aria-label\": `Copy ${value} to clipboard`,\n    disabled: isDisabled,\n    \"aria-live\": \"assertive\"\n  }, /*#__PURE__*/$dnnsg$react.createElement($dnnsg$CopyIcon, {\n    variant: \"muted\",\n    size: size === 'small' ? 'tiny' : 'small'\n  })))));\n}\n\n$b6698237aa721326$var$_CopyButton.displayName = 'CopyButton';\nconst $b6698237aa721326$export$4f2558dd25106ae2 = /*#__PURE__*/$dnnsg$react.forwardRef($b6698237aa721326$var$_CopyButton);\nexport { $b6698237aa721326$export$4f2558dd25106ae2 as CopyButton };","map":{"version":3,"mappings":";;;;;;;AAGO,MAAMA,yCAAS,GAAG,QAAc;EAAA,IAAb;UAAEC;EAAF,CAAa;EACrC,MAAMC,UAAU,GAAGD,IAAI,KAAK,OAATA,GAAmB,MAAnBA,GAA4B,MAA/C;EAEA,OAAO;IACLE,OAAO,eAAEC,WAAI;MACXC,OAAO,EAAE,cADE;MAEXC,MAAM,EAAEJ,UAFG;MAGXK,QAAQ,EAAE,UAHC;MAIXC,KAAK,EAAEN;IAJI,CAAJ,CADJ;IAOLO,UAAU,eAAEL,WAAI;MACdM,UAAU,EAAE,QADE;MAEdC,UAAU,EAAEC,0BAAM,CAACC,UAFL;MAGdC,MAAM,EAAG,aAAYF,0BAAM,CAACG,OAAQ,EAHtB;MAIdV,OAAO,EAAE,aAJK;MAKdC,MAAM,EAAE,MALM;MAMdU,cAAc,EAAE,QANF;MAOdC,OAAO,EAAE,MAPK;MAQdC,OAAO,EAAE,CARK;MASdC,UAAU,EAAG,cAAaP,0BAAM,CAACQ,uBAAwB,IAAGR,0BAAM,CAACS,uBAAwB,EAT7E;MAUdb,KAAK,EAAE,MAVO;MAWd,WAAW;QACTc,eAAe,EAAEV,0BAAM,CAACW,OADf;QAETC,MAAM,EAAE;MAFC,CAXG;MAed,YAAY;QACVF,eAAe,EAAEV,0BAAM,CAACa,OADd;QAEVD,MAAM,EAAE;MAFE,CAfE;MAmBd,WAAW;QACTE,SAAS,EAAEd,0BAAM,CAACe;MADT,CAnBG;MAsBd,+BAA+B;QAC7BD,SAAS,EAAE;MADkB,CAtBjB;MAyBd,mBAAmB;QACjBA,SAAS,EAAEd,0BAAM,CAACe;MADD;IAzBL,CAAJ,CAPP;IAoCLC,kBAAkB,eAAExB,WAAI;MACtBoB,MAAM,EAAE,aADc;MAEtBF,eAAe,EAAEV,0BAAM,CAACW,OAFF;MAItB,WAAW;QACTC,MAAM,EAAE,aADC;QAETF,eAAe,EAAEV,0BAAM,CAACW;MAFf,CAJW;MAStB,WAAW;QACTM,WAAW,EAAEjB,0BAAM,CAACG,OADX;QAETW,SAAS,EAAE;MAFF,CATW;MActB,4BAA4B;QAC1BG,WAAW,EAAEjB,0BAAM,CAACG,OADM;QAE1BW,SAAS,EAAE;MAFe;IAdN,CAAJ;EApCf,CAAP;AAHK;;AC8CP,SAASI,iCAAT,CACEC,KADF,EAEEC,GAFF,EAGE;EACA,MAAM;YACJC,MADI;WAEJC,KAFI;eAGJC,SAHI;IAIJC,MAAM,GAAG,mBAJL;IAKJC,WAAW,GAAG,mBALV;IAMJC,iBAAiB,GAAG,SANhB;kBAOJC,YAPI;IAQJC,UAAU,GAAG,KART;IASJvC,IAAI,GAAG,QATH;IAUJ,GAAGwC;EAVC,IAWFV,KAXJ;EAYA,MAAMW,MAAM,GAAG1C,yCAAS,CAAC;UAAEC;EAAF,CAAD,CAAxB;EAEA,MAAM,CAAC0C,MAAD,EAASC,SAAT,IAAsBC,eAAQ,CAAC,KAAD,CAApC;EACA,MAAMC,MAAM,GAAGC,aAAM,CAA2B,IAA3B,CAArB;EACA,MAAMC,YAAY,GAAGC,kBAAW,CAC7BC,CAAD,IAAe;IACb,IAAIjB,MAAJ,EACEA,MAAM,CAACiB,CAAD,CAANjB;IAGFW,SAAS,CAAC,IAAD,CAATA;IAEAO,UAAU,CAAC,MAAM;MACfP,SAAS,CAAC,KAAD,CAATA;MACA,IAAIE,MAAM,CAACM,OAAX,EACEN,MAAM,CAACM,OAAPN,CAAeO,IAAfP;IAHM,GAKP,IALO,CAAVK;EAR4B,GAe9B,CAAClB,MAAD,CAf8B,CAAhC;EAkBA,oBACEqB,2BAAC,KAAD;IACEtB,KAAKA,GADP;IAEE,gBAAcI,MAFhB;IAGED,WAAWoB,UAAGb,MAAM,CAACvC,OAAV,EAAmBgC,SAAnB,CAHb;IAIE,GAAIM;EAJN,gBAMEa,2BAACE,2BAAD;IAAiBC,MAAMvB,KAAvB;IAA8BD,QAAQe;EAAtC,gBACEM,2BAACI,cAAD;IACEC,SAAShB,MAAM,GAAGL,iBAAH,GAAuBD,WADxC;IAEE,GAAIE,YAFN;IAGEC,YAAYA;EAHd,gBAKEc,2BAAC,QAAD;IACEM,MAAK,QADP;IAEE5B,KAAKc,MAFP;IAGEX,WAAWoB,UAAGb,MAAM,CAACjC,UAAV,EAAsB;MAC/B,CAACiC,MAAM,CAACd,kBAAR,GAA6BY;IADE,CAAtB,CAHb;IAME,cAAa,QAAON,KAAM,eAN5B;IAOE2B,UAAUrB,UAPZ;IAQE,aAAU;EARZ,gBAUEc,2BAACQ,eAAD;IACEC,SAAQ,OADV;IAEE9D,MAAMA,IAAI,KAAK,OAATA,GAAmB,MAAnBA,GAA4B;EAFpC,EAVF,CALF,CADF,CANF,CADF;AAgCD;;AAED6B,iCAAW,CAACkC,WAAZlC,GAA0B,YAA1BA;AAEO,MAAMmC,yCAAU,gBAAGC,YAAK,CAACC,UAAND,CAAiBpC,iCAAjBoC,CAAnB","names":["getStyles","size","buttonSize","wrapper","$dnnsg$css","display","height","position","width","copyButton","alignItems","background","tokens","colorWhite","border","gray300","justifyContent","outline","padding","transition","transitionDurationShort","transitionEasingDefault","backgroundColor","gray100","cursor","gray200","boxShadow","glowMuted","copyButtonDisabled","borderColor","_CopyButton","props","ref","onCopy","value","className","testId","tooltipText","tooltipCopiedText","tooltipProps","isDisabled","otherProps","styles","copied","setCopied","useState","button","useRef","handleOnCopy","useCallback","e","setTimeout","current","blur","$dnnsg$react","$dnnsg$cx","$dnnsg$reactcopytoclipboard","text","$dnnsg$Tooltip","content","type","disabled","$dnnsg$CopyIcon","variant","displayName","CopyButton","React","forwardRef"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-copybutton/dist/packages/components/copybutton/src/CopyButton.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-copybutton/dist/packages/components/copybutton/src/CopyButton.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = ({ size }) => {\n  const buttonSize = size === 'small' ? '32px' : '40px';\n\n  return {\n    wrapper: css({\n      display: 'inline-block',\n      height: buttonSize,\n      position: 'relative',\n      width: buttonSize,\n    }),\n    copyButton: css({\n      alignItems: 'center',\n      background: tokens.colorWhite,\n      border: `1px solid ${tokens.gray300}`,\n      display: 'inline-flex',\n      height: '100%',\n      justifyContent: 'center',\n      outline: 'none',\n      padding: 0,\n      transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n      width: '100%',\n      '&:hover': {\n        backgroundColor: tokens.gray100,\n        cursor: 'pointer',\n      },\n      '&:active': {\n        backgroundColor: tokens.gray200,\n        cursor: 'pointer',\n      },\n      '&:focus': {\n        boxShadow: tokens.glowMuted,\n      },\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset',\n      },\n      '&:focus-visible': {\n        boxShadow: tokens.glowMuted,\n      },\n    }),\n    copyButtonDisabled: css({\n      cursor: 'not-allowed',\n      backgroundColor: tokens.gray100,\n\n      '&:hover': {\n        cursor: 'not-allowed',\n        backgroundColor: tokens.gray100,\n      },\n\n      '&:focus': {\n        borderColor: tokens.gray300,\n        boxShadow: 'none',\n      },\n\n      '&:active, &:active:hover': {\n        borderColor: tokens.gray300,\n        boxShadow: 'none',\n      },\n    }),\n  };\n};\n","import { cx } from 'emotion';\nimport React, { useState, useCallback, useRef } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { CopyIcon } from '@contentful/f36-icons';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport type { TooltipProps } from '@contentful/f36-tooltip';\nimport { getStyles } from './CopyButton.styles';\n\nexport interface CopyButtonProps extends CommonProps {\n  /**\n   * Function that gets called when the button is clicked\n   */\n  onCopy?: (string) => void;\n  /**\n   * Text to be shown when the button is clicked\n   * @default Copied!\n   */\n  tooltipCopiedText?: string;\n  /**\n   * Text to be shown when button is hovered or focused\n   * @default Copy to clipboard\n   */\n  tooltipText?: string;\n  /**\n   * Props that are passed to the tooltip component\n   */\n  tooltipProps?: Omit<TooltipProps, 'content' | 'children'>;\n  /**\n   * Value that will be copied to clipboard when the button is clicked\n   */\n  value: string;\n  /**\n   * Label to be used on aria-label for the button\n   * @default Copy {value} to clipboard\n   */\n  label?: string;\n  /**\n   * Allows to disable the copy button, when true the tooltip would not be shown\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Allows setting size of the copy button to small\n   * @default medium\n   */\n  size?: 'small' | 'medium';\n}\n\nfunction _CopyButton(\n  props: ExpandProps<CopyButtonProps>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    onCopy,\n    value,\n    className,\n    testId = 'cf-ui-copy-button',\n    tooltipText = 'Copy to clipboard',\n    tooltipCopiedText = 'Copied!',\n    tooltipProps,\n    isDisabled = false,\n    size = 'medium',\n    ...otherProps\n  } = props;\n  const styles = getStyles({ size });\n\n  const [copied, setCopied] = useState(false);\n  const button = useRef<HTMLButtonElement | null>(null);\n  const handleOnCopy = useCallback(\n    (e: string) => {\n      if (onCopy) {\n        onCopy(e);\n      }\n\n      setCopied(true);\n\n      setTimeout(() => {\n        setCopied(false);\n        if (button.current) {\n          button.current.blur();\n        }\n      }, 1000);\n    },\n    [onCopy],\n  );\n\n  return (\n    <div\n      ref={ref}\n      data-test-id={testId}\n      className={cx(styles.wrapper, className)}\n      {...otherProps}\n    >\n      <CopyToClipboard text={value} onCopy={handleOnCopy}>\n        <Tooltip\n          content={copied ? tooltipCopiedText : tooltipText}\n          {...tooltipProps}\n          isDisabled={isDisabled}\n        >\n          <button\n            type=\"button\"\n            ref={button}\n            className={cx(styles.copyButton, {\n              [styles.copyButtonDisabled]: isDisabled,\n            })}\n            aria-label={`Copy ${value} to clipboard`}\n            disabled={isDisabled}\n            aria-live=\"assertive\"\n          >\n            <CopyIcon\n              variant=\"muted\"\n              size={size === 'small' ? 'tiny' : 'small'}\n            />\n          </button>\n        </Tooltip>\n      </CopyToClipboard>\n    </div>\n  );\n}\n\n_CopyButton.displayName = 'CopyButton';\n\nexport const CopyButton = React.forwardRef(_CopyButton);\n"]},"metadata":{},"sourceType":"module"}