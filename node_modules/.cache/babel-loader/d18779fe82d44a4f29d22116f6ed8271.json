{"ast":null,"code":"import $k3Dqa$react, { useRef as $k3Dqa$useRef, useLayoutEffect as $k3Dqa$useLayoutEffect } from \"react\";\nimport { Box as $k3Dqa$Box } from \"@contentful/f36-core\";\nimport { cx as $k3Dqa$cx, css as $k3Dqa$css } from \"emotion\";\nimport $k3Dqa$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $738f6177011fac25$export$67c4b7c8eedcd694 = _ref => {\n  let {\n    className: className\n  } = _ref;\n  return {\n    collapseWrapper: $k3Dqa$cx( /*#__PURE__*/$k3Dqa$css({\n      boxSizing: 'border-box',\n      overflow: 'hidden',\n      height: 0,\n      display: 'none',\n      transition: `height ${$k3Dqa$contentfulf36tokens.transitionDurationDefault} ${$k3Dqa$contentfulf36tokens.transitionEasingDefault}, padding ${$k3Dqa$contentfulf36tokens.transitionDurationDefault} ${$k3Dqa$contentfulf36tokens.transitionEasingDefault}`\n    }), className)\n  };\n};\n\nconst $31dbe30f6e3c4e2f$export$78768a9af065a7b = _ref2 => {\n  let {\n    children: children,\n    className: className,\n    isExpanded = false,\n    testId = 'cf-collapse',\n    ...otherProps\n  } = _ref2;\n  const panelEl = $k3Dqa$useRef(null);\n  const styles = $738f6177011fac25$export$67c4b7c8eedcd694({\n    className: className\n  });\n\n  const getPanelContentHeight = () => {\n    const {\n      current: current\n    } = panelEl;\n    if (!current) // to keep the function return type as string only and\n      // not overcomplicate things with non-nullable checks\n      return '0px';\n    return `${current.scrollHeight}px`;\n  };\n\n  $k3Dqa$useLayoutEffect(() => {\n    const {\n      current: current\n    } = panelEl;\n\n    const handleTransitionEnd = () => {\n      if (current) {\n        if (isExpanded) current.style.setProperty('height', 'auto');else {\n          current.style.removeProperty('pointer-events');\n          current.style.setProperty('display', 'none');\n        }\n      }\n    };\n\n    if (current) {\n      current.addEventListener('transitionend', handleTransitionEnd);\n      requestAnimationFrame(function () {\n        if (!isExpanded) // Don't allow interaction while collapsing\n          current.style.setProperty('pointer-events', 'none');else {\n          // Overwrite none display to see expanding transition\n          current.style.setProperty('display', 'block');\n          current.style.removeProperty('pointer-events');\n        } // Calculate panel height after removing none display\n\n        const fromHeight = isExpanded ? '0px' : getPanelContentHeight();\n        const toHeight = isExpanded ? getPanelContentHeight() : '0px';\n        current.style.setProperty('height', fromHeight);\n        requestAnimationFrame(function () {\n          current.style.setProperty('height', toHeight);\n        });\n      });\n    }\n\n    return () => {\n      if (current) current.removeEventListener('transitionend', handleTransitionEnd);\n    };\n  }, [isExpanded]);\n  return /*#__PURE__*/$k3Dqa$react.createElement($k3Dqa$Box, { ...otherProps,\n    testId: testId,\n    role: \"region\",\n    \"aria-hidden\": !isExpanded,\n    className: styles.collapseWrapper,\n    ref: panelEl\n  }, children);\n};\n\nexport { $31dbe30f6e3c4e2f$export$78768a9af065a7b as Collapse };","map":{"version":3,"mappings":"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","names":["getCollapseStyles","className","collapseWrapper","$k3Dqa$cx","$k3Dqa$css","boxSizing","overflow","height","display","transition","tokens","transitionDurationDefault","transitionEasingDefault","Collapse","children","isExpanded","testId","otherProps","panelEl","useRef","styles","getPanelContentHeight","current","scrollHeight","useLayoutEffect","handleTransitionEnd","style","setProperty","removeProperty","addEventListener","requestAnimationFrame","fromHeight","toHeight","removeEventListener","$k3Dqa$react","$k3Dqa$Box","role","ref"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-collapse/dist/packages/components/collapse/src/Collapse.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-collapse/dist/packages/components/collapse/src/Collapse.tsx"],"sourcesContent":["import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getCollapseStyles = ({ className }: { className?: string }) => {\n  return {\n    collapseWrapper: cx(\n      css({\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        height: 0,\n        display: 'none',\n        transition: `height ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}, padding ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      }),\n      className,\n    ),\n  };\n};\n","import React, { useLayoutEffect, useRef } from 'react';\nimport type { CommonProps, PropsWithHTMLElement } from '@contentful/f36-core';\nimport { Box } from '@contentful/f36-core';\nimport { getCollapseStyles } from './Collapse.styles';\n\ninterface CollapseInternalProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * string for additional classNames\n   */\n  className?: string;\n}\n\nexport type CollapseProps = PropsWithHTMLElement<CollapseInternalProps, 'div'>;\n\nexport const Collapse = ({\n  children,\n  className,\n  isExpanded = false,\n  testId = 'cf-collapse',\n  ...otherProps\n}: CollapseProps) => {\n  const panelEl = useRef<HTMLDivElement>(null);\n  const styles = getCollapseStyles({ className });\n\n  const getPanelContentHeight = () => {\n    const { current } = panelEl;\n\n    if (!current) {\n      // to keep the function return type as string only and\n      // not overcomplicate things with non-nullable checks\n      return '0px';\n    }\n\n    return `${current.scrollHeight}px`;\n  };\n\n  useLayoutEffect(() => {\n    const { current } = panelEl;\n\n    const handleTransitionEnd = () => {\n      if (current) {\n        if (isExpanded) {\n          current.style.setProperty('height', 'auto');\n        } else {\n          current.style.removeProperty('pointer-events');\n          current.style.setProperty('display', 'none');\n        }\n      }\n    };\n\n    if (current) {\n      current.addEventListener('transitionend', handleTransitionEnd);\n      requestAnimationFrame(function () {\n        if (!isExpanded) {\n          // Don't allow interaction while collapsing\n          current.style.setProperty('pointer-events', 'none');\n        } else {\n          // Overwrite none display to see expanding transition\n          current.style.setProperty('display', 'block');\n          current.style.removeProperty('pointer-events');\n        }\n        // Calculate panel height after removing none display\n        const fromHeight = isExpanded ? '0px' : getPanelContentHeight();\n        const toHeight = isExpanded ? getPanelContentHeight() : '0px';\n        current.style.setProperty('height', fromHeight);\n\n        requestAnimationFrame(function () {\n          current.style.setProperty('height', toHeight);\n        });\n      });\n    }\n\n    return () => {\n      if (current) {\n        current.removeEventListener('transitionend', handleTransitionEnd);\n      }\n    };\n  }, [isExpanded]);\n\n  return (\n    <Box\n      {...otherProps}\n      testId={testId}\n      role=\"region\"\n      aria-hidden={!isExpanded}\n      className={styles.collapseWrapper}\n      ref={panelEl}\n    >\n      {children}\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}