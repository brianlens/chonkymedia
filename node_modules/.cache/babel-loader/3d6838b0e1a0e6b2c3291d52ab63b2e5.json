{"ast":null,"code":"/*global module:true*/\n\n/*jslint nomen:true*/\n\n/**\n * @module Utility\n */\n(function (context, undefined) {\n  'use strict';\n\n  var DEFAULT_TRUNCATE_SYMBOL = '…',\n      // Limit emails to no more than about 600 chars, well over the max of ~300.\n  // cf. RFC: https://www.rfc-editor.org/errata_search.php?eid=1690\n  URL_REGEX = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]{1,300}@(.{1,300}\\.)[a-zA-Z]{2,3})/g;\n\n  function __appendEllipsis(string, options, content) {\n    if (content.length === string.length || !options.ellipsis) {\n      return content;\n    }\n\n    content += options.ellipsis;\n    return content;\n  }\n  /**\n   * Truncate HTML string and keep tag safe.\n   *\n   * @method truncate\n   * @param {String} string string needs to be truncated\n   * @param {Number} maxLength length of truncated string\n   * @param {Object} options (optional)\n   * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default\n   * @return {String} truncated string\n   */\n\n\n  function truncate(string, maxLength, options) {\n    var content = '',\n        // truncated text storage\n    matches = true,\n        remainingLength = maxLength,\n        result,\n        index;\n    options = options || {};\n    options.ellipsis = typeof options.ellipsis === \"undefined\" ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;\n\n    if (!string || string.length === 0) {\n      return '';\n    }\n\n    matches = true;\n\n    while (matches) {\n      URL_REGEX.lastIndex = content.length;\n      matches = URL_REGEX.exec(string); // Don't try to retain URLs longer than 3k chars, well over the 99th percentile of ~347\n\n      if (!matches || matches.index - content.length >= remainingLength || URL_REGEX.lastIndex >= maxLength + 3000) {\n        content += string.substring(content.length, maxLength);\n        return __appendEllipsis(string, options, content, maxLength);\n      }\n\n      result = matches[0];\n      index = matches.index;\n      content += string.substring(content.length, index + result.length);\n      remainingLength -= index + result.length;\n\n      if (remainingLength <= 0) {\n        break;\n      }\n    }\n\n    return __appendEllipsis(string, options, content, maxLength);\n  }\n\n  if ('undefined' !== typeof module && module.exports) {\n    module.exports = truncate;\n  } else {\n    context.truncate = truncate;\n  }\n})(String);","map":{"version":3,"names":["context","undefined","DEFAULT_TRUNCATE_SYMBOL","URL_REGEX","__appendEllipsis","string","options","content","length","ellipsis","truncate","maxLength","matches","remainingLength","result","index","lastIndex","exec","substring","module","exports","String"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/truncate/truncate.js"],"sourcesContent":["/*global module:true*/\n/*jslint nomen:true*/\n/**\n * @module Utility\n */\n(function (context, undefined) {\n    'use strict';\n\n    var DEFAULT_TRUNCATE_SYMBOL = '…',\n        // Limit emails to no more than about 600 chars, well over the max of ~300.\n        // cf. RFC: https://www.rfc-editor.org/errata_search.php?eid=1690\n        URL_REGEX = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]{1,300}@(.{1,300}\\.)[a-zA-Z]{2,3})/g;\n\n    function __appendEllipsis(string, options, content) {\n        if (content.length === string.length || !options.ellipsis) {\n            return content;\n        }\n        content += options.ellipsis;\n        return content;\n    }\n    /**\n     * Truncate HTML string and keep tag safe.\n     *\n     * @method truncate\n     * @param {String} string string needs to be truncated\n     * @param {Number} maxLength length of truncated string\n     * @param {Object} options (optional)\n     * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default\n     * @return {String} truncated string\n     */\n    function truncate(string, maxLength, options) {\n        var content = '', // truncated text storage\n            matches = true,\n            remainingLength = maxLength,\n            result,\n            index;\n\n        options = options || {};\n        options.ellipsis = (typeof options.ellipsis === \"undefined\") ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;\n\n        if (!string || string.length === 0) {\n            return '';\n        }\n\n        matches = true;\n        while (matches) {\n            URL_REGEX.lastIndex = content.length;\n            matches = URL_REGEX.exec(string);\n            // Don't try to retain URLs longer than 3k chars, well over the 99th percentile of ~347\n            if (!matches || (matches.index - content.length) >= remainingLength || URL_REGEX.lastIndex >= (maxLength + 3000)) {\n                content += string.substring(content.length, maxLength);\n                return __appendEllipsis(string, options, content, maxLength);\n            }\n\n            result = matches[0];\n            index = matches.index;\n            content += string.substring(content.length, index + result.length);\n            remainingLength -= index + result.length;\n\n            if (remainingLength <= 0) {\n                break;\n            }\n        }\n\n        return __appendEllipsis(string, options, content, maxLength);\n    }\n\n    if ('undefined' !== typeof module && module.exports) {\n        module.exports = truncate;\n    } else {\n        context.truncate = truncate;\n    }\n}(String));\n"],"mappings":"AAAA;;AACA;;AACA;AACA;AACA;AACC,WAAUA,OAAV,EAAmBC,SAAnB,EAA8B;EAC3B;;EAEA,IAAIC,uBAAuB,GAAG,GAA9B;EAAA,IACI;EACA;EACAC,SAAS,GAAG,qGAHhB;;EAKA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;IAChD,IAAIA,OAAO,CAACC,MAAR,KAAmBH,MAAM,CAACG,MAA1B,IAAoC,CAACF,OAAO,CAACG,QAAjD,EAA2D;MACvD,OAAOF,OAAP;IACH;;IACDA,OAAO,IAAID,OAAO,CAACG,QAAnB;IACA,OAAOF,OAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASG,QAAT,CAAkBL,MAAlB,EAA0BM,SAA1B,EAAqCL,OAArC,EAA8C;IAC1C,IAAIC,OAAO,GAAG,EAAd;IAAA,IAAkB;IACdK,OAAO,GAAG,IADd;IAAA,IAEIC,eAAe,GAAGF,SAFtB;IAAA,IAGIG,MAHJ;IAAA,IAIIC,KAJJ;IAMAT,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAA,OAAO,CAACG,QAAR,GAAoB,OAAOH,OAAO,CAACG,QAAf,KAA4B,WAA7B,GAA4CP,uBAA5C,GAAsEI,OAAO,CAACG,QAAjG;;IAEA,IAAI,CAACJ,MAAD,IAAWA,MAAM,CAACG,MAAP,KAAkB,CAAjC,EAAoC;MAChC,OAAO,EAAP;IACH;;IAEDI,OAAO,GAAG,IAAV;;IACA,OAAOA,OAAP,EAAgB;MACZT,SAAS,CAACa,SAAV,GAAsBT,OAAO,CAACC,MAA9B;MACAI,OAAO,GAAGT,SAAS,CAACc,IAAV,CAAeZ,MAAf,CAAV,CAFY,CAGZ;;MACA,IAAI,CAACO,OAAD,IAAaA,OAAO,CAACG,KAAR,GAAgBR,OAAO,CAACC,MAAzB,IAAoCK,eAAhD,IAAmEV,SAAS,CAACa,SAAV,IAAwBL,SAAS,GAAG,IAA3G,EAAkH;QAC9GJ,OAAO,IAAIF,MAAM,CAACa,SAAP,CAAiBX,OAAO,CAACC,MAAzB,EAAiCG,SAAjC,CAAX;QACA,OAAOP,gBAAgB,CAACC,MAAD,EAASC,OAAT,EAAkBC,OAAlB,EAA2BI,SAA3B,CAAvB;MACH;;MAEDG,MAAM,GAAGF,OAAO,CAAC,CAAD,CAAhB;MACAG,KAAK,GAAGH,OAAO,CAACG,KAAhB;MACAR,OAAO,IAAIF,MAAM,CAACa,SAAP,CAAiBX,OAAO,CAACC,MAAzB,EAAiCO,KAAK,GAAGD,MAAM,CAACN,MAAhD,CAAX;MACAK,eAAe,IAAIE,KAAK,GAAGD,MAAM,CAACN,MAAlC;;MAEA,IAAIK,eAAe,IAAI,CAAvB,EAA0B;QACtB;MACH;IACJ;;IAED,OAAOT,gBAAgB,CAACC,MAAD,EAASC,OAAT,EAAkBC,OAAlB,EAA2BI,SAA3B,CAAvB;EACH;;EAED,IAAI,gBAAgB,OAAOQ,MAAvB,IAAiCA,MAAM,CAACC,OAA5C,EAAqD;IACjDD,MAAM,CAACC,OAAP,GAAiBV,QAAjB;EACH,CAFD,MAEO;IACHV,OAAO,CAACU,QAAR,GAAmBA,QAAnB;EACH;AACJ,CAnEA,EAmECW,MAnED,CAAD"},"metadata":{},"sourceType":"script"}