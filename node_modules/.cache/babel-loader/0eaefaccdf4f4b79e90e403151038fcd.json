{"ast":null,"code":"import $hYGFM$react, { useState as $hYGFM$useState, useEffect as $hYGFM$useEffect, useCallback as $hYGFM$useCallback, useMemo as $hYGFM$useMemo } from \"react\";\nimport { useId as $hYGFM$useId, mergeRefs as $hYGFM$mergeRefs } from \"@contentful/f36-core\";\nimport { usePopper as $hYGFM$usePopper } from \"react-popper\";\nimport { cx as $hYGFM$cx, css as $hYGFM$css } from \"emotion\";\nimport { Portal as $hYGFM$Portal } from \"@contentful/f36-utils\";\nimport $hYGFM$contentfulf36tokens from \"@contentful/f36-tokens\";\nconst $8c1b76e1106abdf5$var$PopoverContext = $hYGFM$react.createContext(undefined);\n\nconst $8c1b76e1106abdf5$export$1468d0761b26e6c8 = () => {\n  const context = $hYGFM$react.useContext($8c1b76e1106abdf5$var$PopoverContext);\n  if (context === undefined) throw new Error('usePopoverContext must be used within a PopoverContextProvider');\n  return context;\n};\n\nconst $8c1b76e1106abdf5$export$f5300fbf692a63ec = $8c1b76e1106abdf5$var$PopoverContext.Provider;\n\nfunction $fd548c9231cfa260$export$5b6b19405a83ff9d(props) {\n  const {\n    children: children,\n    isOpen: isOpen,\n    placement = 'bottom-start',\n    isFullWidth = false,\n    isAutoalignmentEnabled = true,\n    usePortal = true,\n    closeOnBlur = true,\n    closeOnEsc = true,\n    onClose: onClose,\n    autoFocus = true,\n    id: id,\n    offset = [1, 4],\n    renderOnlyWhenOpen = true\n  } = props;\n  const [triggerElement, setTriggerElement] = $hYGFM$useState(null);\n  const [popoverElement, setPopoverElement] = $hYGFM$useState(null);\n  const {\n    attributes: popperAttributes,\n    forceUpdate: forceUpdate,\n    styles: popperStyles\n  } = $hYGFM$usePopper(triggerElement, popoverElement, {\n    placement: placement,\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: offset\n      }\n    }, { ...$fd548c9231cfa260$var$sameWidth,\n      enabled: isFullWidth\n    }, {\n      name: 'preventOverflow',\n      enabled: isAutoalignmentEnabled,\n      options: {\n        mainAxis: true\n      }\n    }, {\n      name: 'flip',\n      enabled: isAutoalignmentEnabled\n    }]\n  });\n  $hYGFM$useEffect(() => {\n    if (isOpen && autoFocus && popoverElement) popoverElement.focus({\n      preventScroll: true\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, popoverElement]);\n  $hYGFM$useEffect(() => {\n    if (isOpen && forceUpdate) forceUpdate();\n  }, [isOpen, forceUpdate]);\n  const popoverGeneratedId = $hYGFM$useId(null, 'popover-content');\n  const popoverId = id || popoverGeneratedId;\n  const closeAndFocusTrigger = $hYGFM$useCallback(() => {\n    onClose === null || onClose === void 0 ? void 0 : onClose(); // setTimeout trick to make it work with focus-lock\n\n    setTimeout(() => {\n      return triggerElement === null || triggerElement === void 0 ? void 0 : triggerElement.focus({\n        preventScroll: true\n      });\n    }, 0);\n  }, [onClose, triggerElement]);\n  const contextValue = $hYGFM$useMemo(() => {\n    return {\n      isOpen: isOpen,\n      usePortal: usePortal,\n      renderOnlyWhenOpen: renderOnlyWhenOpen,\n      getTriggerProps: function () {\n        let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        return {\n          ref: $hYGFM$mergeRefs(setTriggerElement, _ref),\n          ['aria-expanded']: Boolean(isOpen),\n          ['aria-controls']: popoverId\n        };\n      },\n      getPopoverProps: function () {\n        let _props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        return { ...popperAttributes.popper,\n          style: { ...(_props.style || {}),\n            ...popperStyles.popper\n          },\n          ref: $hYGFM$mergeRefs(setPopoverElement, _ref),\n          id: popoverId,\n          onBlur: event => {\n            if (_props.onBlur) _props.onBlur(event);\n            if (!closeOnBlur) return;\n            const relatedTarget = event.relatedTarget;\n            const targetIsPopover = popoverElement === relatedTarget || (popoverElement === null || popoverElement === void 0 ? void 0 : popoverElement.contains(relatedTarget));\n            const targetIsTrigger = triggerElement === relatedTarget || (triggerElement === null || triggerElement === void 0 ? void 0 : triggerElement.contains(relatedTarget));\n            if (targetIsPopover || targetIsTrigger) return;\n            onClose === null || onClose === void 0 ? void 0 : onClose();\n          },\n          onKeyDown: event => {\n            if (_props.onKeyDown) _props.onKeyDown(event);\n            if (closeOnEsc && event.key === 'Escape') closeAndFocusTrigger();\n          }\n        };\n      }\n    };\n  }, [isOpen, renderOnlyWhenOpen, popperAttributes, popperStyles, usePortal, popoverId, closeOnEsc, closeOnBlur, popoverElement, triggerElement, closeAndFocusTrigger, onClose]);\n  return /*#__PURE__*/$hYGFM$react.createElement($8c1b76e1106abdf5$export$f5300fbf692a63ec, {\n    value: contextValue\n  }, children);\n}\n/**\n * Sets the popover width to the size of the trigger element.\n */\n\n\nconst $fd548c9231cfa260$var$sameWidth = {\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['computeStyles'],\n  fn: _ref2 => {\n    let {\n      state: state\n    } = _ref2;\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  effect: _ref3 => {\n    let {\n      state: state\n    } = _ref3;\n    return () => {\n      const reference = state.elements.reference;\n      state.elements.popper.style.width = `${reference.offsetWidth}px`;\n    };\n  }\n};\n\nconst $8a165eef2449d46a$export$fbd764fe961047f7 = isOpen => ({\n  container: /*#__PURE__*/$hYGFM$css({\n    display: isOpen ? 'initial' : 'none',\n    background: $hYGFM$contentfulf36tokens.colorWhite,\n    border: 0,\n    borderRadius: $hYGFM$contentfulf36tokens.borderRadiusMedium,\n    boxShadow: $hYGFM$contentfulf36tokens.boxShadowDefault,\n    zIndex: $hYGFM$contentfulf36tokens.zIndexDropdown,\n    '&:focus': {\n      boxShadow: $hYGFM$contentfulf36tokens.glowPrimary,\n      outline: 'none'\n    },\n    '&:focus:not(:focus-visible)': {\n      boxShadow: $hYGFM$contentfulf36tokens.boxShadowDefault\n    }\n  })\n});\n\nconst $249e5486684b1d2a$var$_PopoverContent = (props, ref) => {\n  const {\n    children: children,\n    className: className,\n    testId = 'cf-ui-popover-content',\n    role = 'dialog',\n    ...otherProps\n  } = props;\n  const {\n    isOpen: isOpen,\n    renderOnlyWhenOpen: renderOnlyWhenOpen,\n    getPopoverProps: getPopoverProps,\n    usePortal: usePortal\n  } = $8c1b76e1106abdf5$export$1468d0761b26e6c8();\n  const styles = $8a165eef2449d46a$export$fbd764fe961047f7(isOpen);\n  const content = /*#__PURE__*/$hYGFM$react.createElement(\"div\", { ...otherProps,\n    ...getPopoverProps(otherProps, ref),\n    className: $hYGFM$cx(styles.container, className),\n    \"data-test-id\": testId,\n    tabIndex: -1,\n    role: role,\n    // for internal contentful apps usage\n    \"data-position-absolute\": true\n  }, children);\n  if (renderOnlyWhenOpen && !isOpen) return null;\n  return usePortal ? /*#__PURE__*/$hYGFM$react.createElement($hYGFM$Portal, null, content) : content;\n};\n\nconst $249e5486684b1d2a$export$d7e1f420b25549ff = /*#__PURE__*/$hYGFM$react.forwardRef($249e5486684b1d2a$var$_PopoverContent);\n\nconst $2ab55052da688660$export$7dacb05d26466c3 = props => {\n  const child = $hYGFM$react.Children.only(props.children);\n  const {\n    getTriggerProps: getTriggerProps\n  } = $8c1b76e1106abdf5$export$1468d0761b26e6c8();\n  var ref;\n  return /*#__PURE__*/$hYGFM$react.cloneElement(child, { ...getTriggerProps(child.ref),\n    'aria-haspopup': (ref = child.props['aria-haspopup']) !== null && ref !== void 0 ? ref : 'dialog'\n  });\n};\n\nconst $52a0de85cb27ef74$export$5b6b19405a83ff9d = $fd548c9231cfa260$export$5b6b19405a83ff9d;\n$52a0de85cb27ef74$export$5b6b19405a83ff9d.Content = $249e5486684b1d2a$export$d7e1f420b25549ff;\n$52a0de85cb27ef74$export$5b6b19405a83ff9d.Trigger = $2ab55052da688660$export$7dacb05d26466c3;\nexport { $52a0de85cb27ef74$export$5b6b19405a83ff9d as Popover, $2ab55052da688660$export$7dacb05d26466c3 as PopoverTrigger, $249e5486684b1d2a$export$d7e1f420b25549ff as PopoverContent };","map":{"version":3,"mappings":"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","names":["PopoverContext","React","createContext","undefined","usePopoverContext","context","useContext","Error","PopoverContextProvider","Provider","Popover","props","children","isOpen","placement","isFullWidth","isAutoalignmentEnabled","usePortal","closeOnBlur","closeOnEsc","onClose","autoFocus","id","offset","renderOnlyWhenOpen","triggerElement","setTriggerElement","useState","popoverElement","setPopoverElement","attributes","popperAttributes","forceUpdate","styles","popperStyles","usePopper","modifiers","name","options","sameWidth","enabled","mainAxis","useEffect","focus","preventScroll","popoverGeneratedId","useId","popoverId","closeAndFocusTrigger","useCallback","setTimeout","contextValue","useMemo","getTriggerProps","_ref","ref","mergeRefs","Boolean","getPopoverProps","_props","popper","style","onBlur","event","relatedTarget","targetIsPopover","contains","targetIsTrigger","onKeyDown","key","$hYGFM$react","$8c1b76e1106abdf5$export$f5300fbf692a63ec","value","phase","requires","fn","state","width","rects","reference","effect","elements","offsetWidth","getPopoverContentStyles","container","$hYGFM$css","display","background","tokens","colorWhite","border","borderRadius","borderRadiusMedium","boxShadow","boxShadowDefault","zIndex","zIndexDropdown","glowPrimary","outline","_PopoverContent","className","testId","role","otherProps","content","$hYGFM$cx","tabIndex","$hYGFM$Portal","PopoverContent","forwardRef","PopoverTrigger","child","Children","only","cloneElement","OriginalPopover","Content","Trigger"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-popover/dist/packages/components/popover/src/PopoverContext.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-popover/dist/packages/components/popover/src/Popover.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-popover/dist/packages/components/popover/src/PopoverContent/PopoverContent.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-popover/dist/packages/components/popover/src/PopoverContent/PopoverContent.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-popover/dist/packages/components/popover/src/PopoverTrigger/PopoverTrigger.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-popover/dist/packages/components/popover/src/CompoundPopover.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react';\n\nexport type PopoverContextType = {\n  isOpen: boolean;\n  usePortal: boolean;\n  renderOnlyWhenOpen: boolean;\n  getPopoverProps: (\n    _props: HTMLProps<HTMLDivElement>,\n    _ref: React.Ref<HTMLDivElement>,\n  ) => HTMLProps<HTMLDivElement>;\n  getTriggerProps: (_ref: React.Ref<HTMLElement>) => HTMLProps<HTMLElement>;\n};\n\nconst PopoverContext = React.createContext<PopoverContextType | undefined>(\n  undefined,\n);\n\nexport const usePopoverContext = () => {\n  const context = React.useContext(PopoverContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'usePopoverContext must be used within a PopoverContextProvider',\n    );\n  }\n\n  return context;\n};\n\nexport const PopoverContextProvider = PopoverContext.Provider;\n","import React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport { useId, mergeRefs } from '@contentful/f36-core';\nimport type { ExpandProps } from '@contentful/f36-core';\nimport type { Placement, Modifier } from '@popperjs/core';\nimport { PopoverContextProvider, PopoverContextType } from './PopoverContext';\nimport { usePopper } from 'react-popper';\n\nexport interface PopoverProps {\n  children: React.ReactNode;\n\n  /**\n   * Boolean to determine if the Popover should be the same width as\n   * the trigger element\n   *\n   * @default false\n   */\n  isFullWidth?: boolean;\n\n  /**\n   * Boolean to control whether or not the Popover is open\n   *\n   * @default false\n   */\n  isOpen?: boolean;\n\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void;\n\n  /**\n   * Determines the preferred position of the Popover. This position is not\n   * guaranteed, as the Popover might be moved to fit the viewport\n   *\n   * @default bottom-start\n   */\n  placement?: Placement;\n\n  /**\n   * Boolean to control if popover is allowed to change its placement automatically\n   * based on available space in the viewport.\n   *\n   * For example:\n   * If you set placement prop to bottom, but there isn't enough space to position the popover in that direction,\n   * it will change the popper placement to top. As soon as enough space is detected, the placement will be reverted to the defined one.\n   *\n   * If you want the popover to strictly follow the placement prop you should set this prop to false.\n   *\n   * @default true\n   */\n  isAutoalignmentEnabled?: boolean;\n\n  /**\n   * Boolean to control whether or not to render the Popover in a React Portal.\n   * Rendering content inside a Portal allows the Popover to escape the bounds\n   * of its parent while still being positioned correctly. Using a Portal is\n   * necessary if an ancestor of the Popover hides overflow.\n   *\n   * @default true\n   */\n  usePortal?: boolean;\n\n  /**\n   * If true, the popover will close when you blur out it by clicking outside or tabbing out\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean;\n\n  /**\n   * If true, the popover will close when you hit the Esc key\n   *\n   * @default true\n   */\n  closeOnEsc?: boolean;\n\n  /**\n   * If true, the popover will be focused after opening\n   *\n   * @default true\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Popover id. Will be used as an `id` attribute on popover\n   * and as `aria-controls` attribute on trigger\n   *\n   * @default true\n   */\n  id?: string;\n\n  /**\n   * The `X-axis` and `Y-axis` offset to position popper element\n   * from its trigger element. `[X, Y]`\n   *\n   * @default [1, 4]\n   */\n  offset?: [number, number];\n\n  /**\n   * Defines if popover should be rendered in the DOM only when it's open\n   * or all the time (after the component has been mounted)\n   *\n   * @default true\n   */\n  renderOnlyWhenOpen?: boolean;\n}\n\nexport function Popover(props: ExpandProps<PopoverProps>) {\n  const {\n    children,\n    isOpen,\n    placement = 'bottom-start',\n    isFullWidth = false,\n    isAutoalignmentEnabled = true,\n    usePortal = true,\n    closeOnBlur = true,\n    closeOnEsc = true,\n    onClose,\n    autoFocus = true,\n    id,\n    offset = [1, 4],\n    renderOnlyWhenOpen = true,\n  } = props;\n\n  const [triggerElement, setTriggerElement] = useState<HTMLElement | null>(\n    null,\n  );\n  const [popoverElement, setPopoverElement] = useState<HTMLElement | null>(\n    null,\n  );\n\n  const {\n    attributes: popperAttributes,\n    forceUpdate,\n    styles: popperStyles,\n  } = usePopper(triggerElement, popoverElement, {\n    placement,\n    modifiers: [\n      {\n        name: 'offset',\n        options: {\n          offset,\n        },\n      },\n      {\n        ...sameWidth,\n        enabled: isFullWidth,\n      },\n      {\n        name: 'preventOverflow',\n        enabled: isAutoalignmentEnabled,\n        options: {\n          mainAxis: true,\n        },\n      },\n      {\n        name: 'flip',\n        enabled: isAutoalignmentEnabled,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (isOpen && autoFocus && popoverElement) {\n      popoverElement.focus({ preventScroll: true });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, popoverElement]);\n\n  useEffect(() => {\n    if (isOpen && forceUpdate) {\n      forceUpdate();\n    }\n  }, [isOpen, forceUpdate]);\n\n  const popoverGeneratedId = useId(null, 'popover-content');\n  const popoverId = id || popoverGeneratedId;\n\n  const closeAndFocusTrigger = useCallback(() => {\n    onClose?.();\n\n    // setTimeout trick to make it work with focus-lock\n    setTimeout(() => triggerElement?.focus({ preventScroll: true }), 0);\n  }, [onClose, triggerElement]);\n\n  const contextValue: PopoverContextType = useMemo(\n    () => ({\n      isOpen,\n      usePortal,\n      renderOnlyWhenOpen,\n      getTriggerProps: (_ref = null) => ({\n        ref: mergeRefs(setTriggerElement, _ref),\n        ['aria-expanded']: Boolean(isOpen),\n        ['aria-controls']: popoverId,\n      }),\n      getPopoverProps: (_props = {}, _ref = null) => ({\n        ...popperAttributes.popper,\n        style: {\n          ...(_props.style || {}),\n          ...popperStyles.popper,\n        },\n        ref: mergeRefs(setPopoverElement, _ref),\n        id: popoverId,\n        onBlur: (event: React.FocusEvent<HTMLDivElement>) => {\n          if (_props.onBlur) {\n            _props.onBlur(event);\n          }\n\n          if (!closeOnBlur) {\n            return;\n          }\n\n          const relatedTarget = event.relatedTarget as Node;\n\n          const targetIsPopover =\n            popoverElement === relatedTarget ||\n            popoverElement?.contains(relatedTarget);\n          const targetIsTrigger =\n            triggerElement === relatedTarget ||\n            triggerElement?.contains(relatedTarget);\n\n          if (targetIsPopover || targetIsTrigger) {\n            return;\n          }\n\n          onClose?.();\n        },\n        onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => {\n          if (_props.onKeyDown) {\n            _props.onKeyDown(event);\n          }\n\n          if (closeOnEsc && event.key === 'Escape') {\n            closeAndFocusTrigger();\n          }\n        },\n      }),\n    }),\n    [\n      isOpen,\n      renderOnlyWhenOpen,\n      popperAttributes,\n      popperStyles,\n      usePortal,\n      popoverId,\n      closeOnEsc,\n      closeOnBlur,\n      popoverElement,\n      triggerElement,\n      closeAndFocusTrigger,\n      onClose,\n    ],\n  );\n\n  return (\n    <PopoverContextProvider value={contextValue}>\n      {children}\n    </PopoverContextProvider>\n  );\n}\n\n/**\n * Sets the popover width to the size of the trigger element.\n */\nconst sameWidth: Modifier<'sameWidth', any> = {\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['computeStyles'],\n  fn: ({ state }) => {\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  effect: ({ state }) => () => {\n    const reference = state.elements.reference as HTMLElement;\n    state.elements.popper.style.width = `${reference.offsetWidth}px`;\n  },\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getPopoverContentStyles = (isOpen: boolean) => ({\n  container: css({\n    display: isOpen ? 'initial' : 'none',\n    background: tokens.colorWhite,\n    border: 0,\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: tokens.boxShadowDefault,\n    zIndex: tokens.zIndexDropdown,\n    '&:focus': {\n      boxShadow: tokens.glowPrimary,\n      outline: 'none',\n    },\n    '&:focus:not(:focus-visible)': {\n      boxShadow: tokens.boxShadowDefault,\n    },\n  }),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { usePopoverContext } from '../PopoverContext';\nimport { Portal } from '@contentful/f36-utils';\nimport { getPopoverContentStyles } from './PopoverContent.styles';\n\ninterface PopoverContentInternalProps extends CommonProps {\n  children?: React.ReactNode;\n}\n\nexport type PopoverContentProps = PropsWithHTMLElement<\n  PopoverContentInternalProps,\n  'div'\n>;\n\nconst _PopoverContent = (props: ExpandProps<PopoverContentProps>, ref) => {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-popover-content',\n    role = 'dialog',\n    ...otherProps\n  } = props;\n  const {\n    isOpen,\n    renderOnlyWhenOpen,\n    getPopoverProps,\n    usePortal,\n  } = usePopoverContext();\n\n  const styles = getPopoverContentStyles(isOpen);\n\n  const content = (\n    <div\n      {...otherProps}\n      {...getPopoverProps(otherProps, ref)}\n      className={cx(styles.container, className)}\n      data-test-id={testId}\n      tabIndex={-1}\n      role={role}\n      // specific attribute to mark that this element is absolute positioned\n      // for internal contentful apps usage\n      data-position-absolute\n    >\n      {children}\n    </div>\n  );\n\n  if (renderOnlyWhenOpen && !isOpen) {\n    return null;\n  }\n\n  return usePortal ? <Portal>{content}</Portal> : content;\n};\n\nexport const PopoverContent = React.forwardRef(_PopoverContent);\n","import React from 'react';\nimport { usePopoverContext } from '../PopoverContext';\n\nexport interface PopoverTriggerProps {\n  children: React.ReactNode;\n}\n\n/**\n * PopoverTrigger opens the popover. It must be an interactive element.\n */\nexport const PopoverTrigger = (props: PopoverTriggerProps) => {\n  const child = React.Children.only(props.children) as any;\n  const { getTriggerProps } = usePopoverContext();\n\n  return React.cloneElement(child, {\n    ...getTriggerProps(child.ref),\n    'aria-haspopup': child.props['aria-haspopup'] ?? 'dialog',\n  });\n};\n","import { Popover as OriginalPopover } from './Popover';\nimport { PopoverContent } from './PopoverContent/PopoverContent';\nimport { PopoverTrigger } from './PopoverTrigger/PopoverTrigger';\n\ntype CompoundPopover = typeof OriginalPopover & {\n  Content: typeof PopoverContent;\n  Trigger: typeof PopoverTrigger;\n};\n\nexport const Popover = OriginalPopover as CompoundPopover;\nPopover.Content = PopoverContent;\nPopover.Trigger = PopoverTrigger;\n"]},"metadata":{},"sourceType":"module"}