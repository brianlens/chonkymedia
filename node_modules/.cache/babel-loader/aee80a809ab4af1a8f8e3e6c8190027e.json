{"ast":null,"code":"import { cx as $1glhb$cx, css as $1glhb$css } from \"emotion\";\nimport $1glhb$react from \"react\";\nimport { Grid as $1glhb$Grid, Flex as $1glhb$Flex } from \"@contentful/f36-core\";\nimport { Button as $1glhb$Button } from \"@contentful/f36-button\";\nimport { Heading as $1glhb$Heading, Text as $1glhb$Text, Paragraph as $1glhb$Paragraph } from \"@contentful/f36-typography\";\nimport { InfoCircleIcon as $1glhb$InfoCircleIcon, CheckCircleIcon as $1glhb$CheckCircleIcon, ErrorCircleIcon as $1glhb$ErrorCircleIcon, WarningIcon as $1glhb$WarningIcon, CloseIcon as $1glhb$CloseIcon } from \"@contentful/f36-icons\";\nimport { Icon as $1glhb$Icon } from \"@contentful/f36-icon\";\nimport $1glhb$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $40db410f6b3626c8$var$variantToStyles = variant => {\n  switch (variant) {\n    case 'primary':\n      return {\n        backgroundColor: $1glhb$contentfulf36tokens.blue100,\n        borderColor: $1glhb$contentfulf36tokens.blue300,\n        a: {\n          color: $1glhb$contentfulf36tokens.blue700\n        }\n      };\n\n    case 'positive':\n      return {\n        backgroundColor: $1glhb$contentfulf36tokens.green100,\n        borderColor: $1glhb$contentfulf36tokens.green300,\n        a: {\n          color: $1glhb$contentfulf36tokens.green700\n        }\n      };\n\n    case 'negative':\n      return {\n        backgroundColor: $1glhb$contentfulf36tokens.red100,\n        borderColor: $1glhb$contentfulf36tokens.red300,\n        a: {\n          color: $1glhb$contentfulf36tokens.red700\n        }\n      };\n\n    case 'warning':\n      return {\n        backgroundColor: $1glhb$contentfulf36tokens.orange100,\n        borderColor: $1glhb$contentfulf36tokens.orange300,\n        a: {\n          color: $1glhb$contentfulf36tokens.orange700\n        }\n      };\n\n    default:\n      return {};\n  }\n};\n\nconst $40db410f6b3626c8$export$513fe11e594cca6f = () => {\n  return {\n    container: _ref => {\n      let {\n        variant: variant\n      } = _ref;\n      return /*#__PURE__*/$1glhb$css({\n        position: 'relative',\n        borderRadius: $1glhb$contentfulf36tokens.borderRadiusMedium,\n        border: '1px solid',\n        ...$40db410f6b3626c8$var$variantToStyles(variant)\n      });\n    },\n    title: /*#__PURE__*/$1glhb$css({\n      color: $1glhb$contentfulf36tokens.gray800,\n      fontSize: $1glhb$contentfulf36tokens.fontSizeL,\n      lineHeight: $1glhb$contentfulf36tokens.lineHeightL\n    }),\n    description: /*#__PURE__*/$1glhb$css({\n      color: $1glhb$contentfulf36tokens.gray700\n    }),\n    close: /*#__PURE__*/$1glhb$css({\n      position: 'absolute',\n      top: $1glhb$contentfulf36tokens.spacingXs,\n      right: $1glhb$contentfulf36tokens.spacingXs,\n      padding: $1glhb$contentfulf36tokens.spacingXs,\n      '&:hover, &:active': {\n        backgroundColor: 'transparent'\n      }\n    }),\n    closeIcon: /*#__PURE__*/$1glhb$css({\n      fill: $1glhb$contentfulf36tokens.gray600\n    })\n  };\n};\n\nconst $4933ec7cc08cf190$var$icons = {\n  primary: $1glhb$InfoCircleIcon,\n  positive: $1glhb$CheckCircleIcon,\n  negative: $1glhb$ErrorCircleIcon,\n  warning: $1glhb$WarningIcon\n};\nconst $4933ec7cc08cf190$export$6c88bf799aca3d2b = /*#__PURE__*/$1glhb$react.forwardRef((props, ref) => {\n  const {\n    children: children,\n    className: className,\n    withCloseButton = false,\n    variant = 'primary',\n    onClose: onClose,\n    testId = 'cf-ui-note',\n    title: title,\n    ...otherProps\n  } = props;\n  const styles = $40db410f6b3626c8$export$513fe11e594cca6f();\n  return /*#__PURE__*/$1glhb$react.createElement($1glhb$Grid, { ...otherProps,\n    columns: withCloseButton ? 'auto 1fr 24px' : 'auto 1fr',\n    as: \"article\",\n    className: $1glhb$cx(styles.container({\n      variant: variant\n    }), className),\n    testId: testId,\n    ref: ref,\n    padding: \"spacingM\"\n  }, /*#__PURE__*/$1glhb$react.createElement($1glhb$Icon, {\n    as: $4933ec7cc08cf190$var$icons[variant],\n    variant: variant,\n    size: title ? 'medium' : 'small'\n  }), /*#__PURE__*/$1glhb$react.createElement($1glhb$Flex, {\n    flexDirection: \"column\"\n  }, title && /*#__PURE__*/$1glhb$react.createElement($1glhb$Heading, {\n    as: \"h2\",\n    className: styles.title,\n    marginBottom: !children ? 'none' : 'spacingS'\n  }, title), children && /*#__PURE__*/$1glhb$react.createElement($1glhb$Text, {\n    as: \"div\",\n    lineHeight: \"lineHeightM\",\n    className: styles.description\n  }, typeof children === 'string' ? /*#__PURE__*/$1glhb$react.createElement($1glhb$Paragraph, {\n    marginBottom: \"none\"\n  }, children) : children)), withCloseButton && /*#__PURE__*/$1glhb$react.createElement($1glhb$Button, {\n    variant: \"transparent\",\n    startIcon: /*#__PURE__*/$1glhb$react.createElement($1glhb$CloseIcon, {\n      className: styles.closeIcon\n    }),\n    onClick: onClose,\n    testId: `${testId}-close`,\n    \"aria-label\": \"Dismiss\",\n    className: styles.close\n  }));\n});\n$4933ec7cc08cf190$export$6c88bf799aca3d2b.displayName = 'Note';\nexport { $4933ec7cc08cf190$export$6c88bf799aca3d2b as Note };","map":{"version":3,"mappings":";;;;;;;;;AAMA,MAAMA,qCAAe,GAAIC,OAAD,IAAqC;EAC3D,QAAQA,OAAR;IACE,KAAK,SAAL;MACE,OAAO;QACLC,eAAe,EAAEC,0BAAM,CAACC,OADnB;QAELC,WAAW,EAAEF,0BAAM,CAACG,OAFf;QAILC,CAAC,EAAE;UACDC,KAAK,EAAEL,0BAAM,CAACM;QADb;MAJE,CAAP;;IAQF,KAAK,UAAL;MACE,OAAO;QACLP,eAAe,EAAEC,0BAAM,CAACO,QADnB;QAELL,WAAW,EAAEF,0BAAM,CAACQ,QAFf;QAILJ,CAAC,EAAE;UACDC,KAAK,EAAEL,0BAAM,CAACS;QADb;MAJE,CAAP;;IAQF,KAAK,UAAL;MACE,OAAO;QACLV,eAAe,EAAEC,0BAAM,CAACU,MADnB;QAELR,WAAW,EAAEF,0BAAM,CAACW,MAFf;QAILP,CAAC,EAAE;UACDC,KAAK,EAAEL,0BAAM,CAACY;QADb;MAJE,CAAP;;IAQF,KAAK,SAAL;MACE,OAAO;QACLb,eAAe,EAAEC,0BAAM,CAACa,SADnB;QAELX,WAAW,EAAEF,0BAAM,CAACc,SAFf;QAILV,CAAC,EAAE;UACDC,KAAK,EAAEL,0BAAM,CAACe;QADb;MAJE,CAAP;;IAQF;MACE,OAAO,EAAP;EAtCJ;AADF;;AA2CO,MAAMC,yCAAa,GAAG,MAAM;EACjC,OAAO;IACLC,SAAS,EAAE;MAAA,IAAC;iBAAEnB;MAAF,CAAD;MAAA,oBACToB,WAAI;QACFC,QAAQ,EAAE,UADR;QAEFC,YAAY,EAAEpB,0BAAM,CAACqB,kBAFnB;QAGFC,MAAM,EAAE,WAHN;QAIF,GAAGzB,qCAAe,CAACC,OAAD;MAJhB,CAAJ,CADS;IAAA,CADN;IAQLyB,KAAK,eAAEL,WAAI;MACTb,KAAK,EAAEL,0BAAM,CAACwB,OADL;MAETC,QAAQ,EAAEzB,0BAAM,CAAC0B,SAFR;MAGTC,UAAU,EAAE3B,0BAAM,CAAC4B;IAHV,CAAJ,CARF;IAaLC,WAAW,eAAEX,WAAI;MACfb,KAAK,EAAEL,0BAAM,CAAC8B;IADC,CAAJ,CAbR;IAgBLC,KAAK,eAAEb,WAAI;MACTC,QAAQ,EAAE,UADD;MAETa,GAAG,EAAEhC,0BAAM,CAACiC,SAFH;MAGTC,KAAK,EAAElC,0BAAM,CAACiC,SAHL;MAITE,OAAO,EAAEnC,0BAAM,CAACiC,SAJP;MAKT,qBAAqB;QACnBlC,eAAe,EAAE;MADE;IALZ,CAAJ,CAhBF;IAyBLqC,SAAS,eAAElB,WAAI;MACbmB,IAAI,EAAErC,0BAAM,CAACsC;IADA,CAAJ;EAzBN,CAAP;AADK;;AC5BP,MAAMC,2BAAK,GAAG;EACZC,OAAO,EAAEC,qBADG;EAEZC,QAAQ,EAAEC,sBAFE;EAGZC,QAAQ,EAAEC,sBAHE;EAIZC,OAAO,EAAEC;AAJG,CAAd;AAqCO,MAAMC,yCAAI,gBAAGC,YAAK,CAACC,UAAND,CAClB,CAACE,KAAD,EAAQC,GAAR,KAAgB;EACd,MAAM;cACJC,QADI;eAEJC,SAFI;IAGJC,eAAe,GAAG,KAHd;IAIJzD,OAAO,GAAG,SAJN;aAKJ0D,OALI;IAMJC,MAAM,GAAG,YANL;WAOJlC,KAPI;IAQJ,GAAGmC;EARC,IASFP,KATJ;EAWA,MAAMQ,MAAM,GAAG3C,yCAAa,EAA5B;EAEA,oBACE4C,2BAACC,WAAD,IACE,GAAIH,UADN;IAEEI,SAASP,eAAe,GAAG,eAAH,GAAqB,UAF/C;IAGEQ,IAAG,SAHL;IAIET,WAAWU,UAAGL,MAAM,CAAC1C,SAAP0C,CAAiB;eAAE7D;IAAF,CAAjB6D,CAAH,EAAkCL,SAAlC,CAJb;IAKEG,QAAQA,MALV;IAMEL,KAAKA,GANP;IAOEjB,SAAQ;EAPV,gBASEyB,2BAACK,WAAD;IACEF,IAAIxB,2BAAK,CAACzC,OAAD,CADX;IAEEA,SAASA,OAFX;IAGEoE,MAAM3C,KAAK,GAAG,QAAH,GAAc;EAH3B,EATF,EASN,aAKQqC,2BAACO,WAAD;IAAMC,eAAc;EAApB,GACG7C,KAAK,iBACJqC,2BAACS,cAAD;IACEN,IAAG,IADL;IAEET,WAAWK,MAAM,CAACpC,KAFpB;IAGE+C,cAAc,CAACjB,QAAD,GAAY,MAAZ,GAAqB;EAHrC,GAKG9B,KALH,CAFJ,EAUG8B,QAAQ,iBACPO,2BAACW,WAAD;IACER,IAAG,KADL;IAEEpC,YAAW,aAFb;IAGE2B,WAAWK,MAAM,CAAC9B;EAHpB,GAKG,OAAOwB,QAAP,KAAoB,QAApB,gBACCO,2BAACY,gBAAD;IAAWF,cAAa;EAAxB,GAAgCjB,QAAhC,CADD,GAGCA,QARJ,CAXJ,CAdF,EAsCGE,eAAe,iBACdK,2BAACa,aAAD;IACE3E,SAAQ,aADV;IAEE4E,wBAAWd,2BAACe,gBAAD;MAAWrB,WAAWK,MAAM,CAACvB;IAA7B,EAFb;IAGEwC,SAASpB,OAHX;IAIEC,QAAS,GAAEA,MAAO,QAJpB;IAKE,cAAW,SALb;IAMEH,WAAWK,MAAM,CAAC5B;EANpB,EAvCJ,CADF;AAfgB,EAAb;AAqEPiB,yCAAI,CAAC6B,WAAL7B,GAAmB,MAAnBA","names":["variantToStyles","variant","backgroundColor","tokens","blue100","borderColor","blue300","a","color","blue700","green100","green300","green700","red100","red300","red700","orange100","orange300","orange700","getNoteStyles","container","$1glhb$css","position","borderRadius","borderRadiusMedium","border","title","gray800","fontSize","fontSizeL","lineHeight","lineHeightL","description","gray700","close","top","spacingXs","right","padding","closeIcon","fill","gray600","icons","primary","InfoCircleIcon","positive","CheckCircleIcon","negative","ErrorCircleIcon","warning","WarningIcon","Note","React","forwardRef","props","ref","children","className","withCloseButton","onClose","testId","otherProps","styles","$1glhb$react","$1glhb$Grid","columns","as","$1glhb$cx","$1glhb$Icon","size","$1glhb$Flex","flexDirection","$1glhb$Heading","marginBottom","$1glhb$Text","$1glhb$Paragraph","$1glhb$Button","startIcon","$1glhb$CloseIcon","onClick","displayName"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-note/dist/packages/components/note/src/Note.styles.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-note/dist/packages/components/note/src/Note.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\n\nimport type { NoteProps, NoteVariant } from './Note';\n\nconst variantToStyles = (variant: NoteVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return {\n        backgroundColor: tokens.blue100,\n        borderColor: tokens.blue300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'positive':\n      return {\n        backgroundColor: tokens.green100,\n        borderColor: tokens.green300,\n\n        a: {\n          color: tokens.green700,\n        },\n      };\n    case 'negative':\n      return {\n        backgroundColor: tokens.red100,\n        borderColor: tokens.red300,\n\n        a: {\n          color: tokens.red700,\n        },\n      };\n    case 'warning':\n      return {\n        backgroundColor: tokens.orange100,\n        borderColor: tokens.orange300,\n\n        a: {\n          color: tokens.orange700,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nexport const getNoteStyles = () => {\n  return {\n    container: ({ variant }: Pick<NoteProps, 'variant'>) =>\n      css({\n        position: 'relative',\n        borderRadius: tokens.borderRadiusMedium,\n        border: '1px solid',\n        ...variantToStyles(variant),\n      }),\n    title: css({\n      color: tokens.gray800,\n      fontSize: tokens.fontSizeL,\n      lineHeight: tokens.lineHeightL,\n    }),\n    description: css({\n      color: tokens.gray700,\n    }),\n    close: css({\n      position: 'absolute',\n      top: tokens.spacingXs,\n      right: tokens.spacingXs,\n      padding: tokens.spacingXs,\n      '&:hover, &:active': {\n        backgroundColor: 'transparent',\n      },\n    }),\n    closeIcon: css({\n      fill: tokens.gray600,\n    }),\n  };\n};\n","import { cx } from 'emotion';\nimport React from 'react';\nimport { Flex, Grid } from '@contentful/f36-core';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Button } from '@contentful/f36-button';\nimport { Heading, Paragraph, Text } from '@contentful/f36-typography';\nimport {\n  CheckCircleIcon,\n  CloseIcon,\n  ErrorCircleIcon,\n  InfoCircleIcon,\n  WarningIcon,\n} from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\n\nimport { getNoteStyles } from './Note.styles';\n\nconst icons = {\n  primary: InfoCircleIcon,\n  positive: CheckCircleIcon,\n  negative: ErrorCircleIcon,\n  warning: WarningIcon,\n};\n\nexport type NoteVariant = 'negative' | 'positive' | 'primary' | 'warning';\n\nexport type NoteInternalProps = CommonProps & {\n  /**\n   * Determines style variation of Note component\n   */\n  variant?: NoteVariant;\n  /**\n   * Sets title in the Note\n   */\n  title?: React.ReactNode;\n  /**\n   * Children of Note\n   */\n  children?: React.ReactNode | string;\n  /**\n   * Defines if the close button should be rendered\n   * @default false\n   */\n  withCloseButton?: boolean;\n  /**\n   * Callback for handling closing\n   */\n  onClose?: React.MouseEventHandler<HTMLButtonElement>;\n};\nexport type NoteProps = PropsWithHTMLElement<NoteInternalProps, 'article'>;\n\n/**\n * @description: Note provides context and information about a situation or action.\n */\nexport const Note = React.forwardRef<HTMLElement, ExpandProps<NoteProps>>(\n  (props, ref) => {\n    const {\n      children,\n      className,\n      withCloseButton = false,\n      variant = 'primary',\n      onClose,\n      testId = 'cf-ui-note',\n      title,\n      ...otherProps\n    } = props;\n\n    const styles = getNoteStyles();\n\n    return (\n      <Grid\n        {...otherProps}\n        columns={withCloseButton ? 'auto 1fr 24px' : 'auto 1fr'} // 24px is the width of the close button\n        as=\"article\"\n        className={cx(styles.container({ variant }), className)}\n        testId={testId}\n        ref={ref}\n        padding=\"spacingM\"\n      >\n        <Icon\n          as={icons[variant]}\n          variant={variant}\n          size={title ? 'medium' : 'small'}\n        />\n        <Flex flexDirection=\"column\">\n          {title && (\n            <Heading\n              as=\"h2\"\n              className={styles.title}\n              marginBottom={!children ? 'none' : 'spacingS'}\n            >\n              {title}\n            </Heading>\n          )}\n          {children && (\n            <Text\n              as=\"div\"\n              lineHeight=\"lineHeightM\"\n              className={styles.description}\n            >\n              {typeof children === 'string' ? (\n                <Paragraph marginBottom=\"none\">{children}</Paragraph>\n              ) : (\n                children\n              )}\n            </Text>\n          )}\n        </Flex>\n        {withCloseButton && (\n          <Button\n            variant=\"transparent\"\n            startIcon={<CloseIcon className={styles.closeIcon} />}\n            onClick={onClose}\n            testId={`${testId}-close`}\n            aria-label=\"Dismiss\"\n            className={styles.close}\n          />\n        )}\n      </Grid>\n    );\n  },\n);\n\nNote.displayName = 'Note';\n"]},"metadata":{},"sourceType":"module"}