{"ast":null,"code":"import { cx as $eBAed$cx, css as $eBAed$css } from \"emotion\";\nimport $eBAed$react from \"react\";\nimport { Tooltip as $eBAed$Tooltip } from \"@contentful/f36-tooltip\";\nimport { DragIcon as $eBAed$DragIcon, CloseIcon as $eBAed$CloseIcon } from \"@contentful/f36-icons\";\nimport { Button as $eBAed$Button } from \"@contentful/f36-button\";\nimport $eBAed$contentfulf36tokens from \"@contentful/f36-tokens\";\n\nconst $c9003ed854b253a9$var$getCloseButtonStyle = () => {\n  return /*#__PURE__*/$eBAed$css({\n    borderLeft: `1px solid ${$eBAed$contentfulf36tokens.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: $eBAed$contentfulf36tokens.spacingXs,\n    minHeight: 'auto',\n    transition: `background ${$eBAed$contentfulf36tokens.transitionDurationShort} ${$eBAed$contentfulf36tokens.transitionEasingDefault},\n    opacity ${$eBAed$contentfulf36tokens.transitionDurationDefault} ${$eBAed$contentfulf36tokens.transitionEasingDefault}`,\n    '&:focus': {\n      boxShadow: $eBAed$contentfulf36tokens.glowMuted,\n      borderLeftColor: $eBAed$contentfulf36tokens.gray300\n    },\n    '&:hover, &:focus, &:active': {\n      backgroundColor: $eBAed$contentfulf36tokens.gray300\n    }\n  });\n};\n\nconst $c9003ed854b253a9$var$getLabelStyle = () => {\n  return /*#__PURE__*/$eBAed$css({\n    color: $eBAed$contentfulf36tokens.gray700,\n    lineHeight: $eBAed$contentfulf36tokens.lineHeightM,\n    padding: $eBAed$contentfulf36tokens.spacingXs,\n    fontSize: $eBAed$contentfulf36tokens.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden'\n  });\n};\n\nconst $c9003ed854b253a9$var$getPillStyle = variant1 => {\n  const variantStyle = variant => {\n    switch (variant) {\n      case 'active':\n        return {\n          background: $eBAed$contentfulf36tokens.gray300\n        };\n\n      case 'deleted':\n        return {\n          background: $eBAed$contentfulf36tokens.gray200,\n          textDecoration: 'line-through',\n          opacity: '0.5'\n        };\n\n      default:\n        return {\n          background: $eBAed$contentfulf36tokens.gray200\n        };\n    }\n  };\n\n  return /*#__PURE__*/$eBAed$css({\n    display: 'inline-flex',\n    fontFamily: $eBAed$contentfulf36tokens.fontStackPrimary,\n    alignItems: 'center',\n    borderRadius: $eBAed$contentfulf36tokens.borderRadiusSmall,\n    border: 'none',\n    padding: 0,\n    maxWidth: '100%',\n    ...variantStyle(variant1)\n  });\n};\n\nfunction $c9003ed854b253a9$export$f8a32d770d8a45c9(variant) {\n  return {\n    closeButton: $c9003ed854b253a9$var$getCloseButtonStyle(),\n    label: $c9003ed854b253a9$var$getLabelStyle(),\n    icon: /*#__PURE__*/$eBAed$css({\n      fill: $eBAed$contentfulf36tokens.gray600,\n      verticalAlign: 'middle',\n      outline: 'none'\n    }),\n    dragIcon: /*#__PURE__*/$eBAed$css({\n      padding: $eBAed$contentfulf36tokens.spacingXs,\n      paddingRight: 0,\n      cursor: 'move'\n    }),\n    pill: $c9003ed854b253a9$var$getPillStyle(variant)\n  };\n}\n\nconst $cea80b934e2f5738$export$d2cf3038149dd1b5 = /*#__PURE__*/$eBAed$react.forwardRef((props, ref1) => {\n  const {\n    label: label,\n    onClose: onClose,\n    testId = 'cf-ui-pill',\n    onDrag: onDrag,\n    className: className,\n    dragHandleComponent: dragHandleComponent,\n    variant = 'idle',\n    ...otherProps\n  } = props;\n  const styles = $c9003ed854b253a9$export$f8a32d770d8a45c9(variant);\n  const [textIsTruncated, setTextIsTruncated] = $eBAed$react.useState(false);\n  const trackRefChange = $eBAed$react.useCallback(ref => {\n    if (!ref) return;\n    const {\n      scrollWidth: scrollWidth,\n      offsetWidth: offsetWidth\n    } = ref.parentElement;\n    setTextIsTruncated(scrollWidth > offsetWidth);\n  }, [setTextIsTruncated]);\n  return /*#__PURE__*/$eBAed$react.createElement(\"div\", {\n    className: $eBAed$cx(styles.pill, className),\n    \"data-test-id\": testId,\n    onDrag: onDrag,\n    ref: ref1,\n    ...otherProps\n  }, onDrag && (dragHandleComponent ? dragHandleComponent : /*#__PURE__*/$eBAed$react.createElement(\"span\", {\n    \"aria-label\": \"Drag handler\",\n    className: styles.dragIcon\n  }, /*#__PURE__*/$eBAed$react.createElement($eBAed$DragIcon, {\n    className: styles.icon,\n    variant: \"muted\"\n  }))), /*#__PURE__*/$eBAed$react.createElement($eBAed$Tooltip, {\n    content: label,\n    maxWidth: \"none\",\n    targetWrapperClassName: styles.label,\n    isDisabled: !textIsTruncated\n  }, /*#__PURE__*/$eBAed$react.createElement(\"span\", {\n    ref: trackRefChange\n  }, label)), onClose && /*#__PURE__*/$eBAed$react.createElement($eBAed$Button, {\n    type: \"button\",\n    variant: \"transparent\",\n    startIcon: /*#__PURE__*/$eBAed$react.createElement($eBAed$CloseIcon, {\n      \"aria-label\": \"Close\"\n    }),\n    \"aria-label\": \"Close\",\n    onClick: onClose,\n    className: styles.closeButton\n  }));\n});\n$cea80b934e2f5738$export$d2cf3038149dd1b5.displayName = 'Pill';\nexport { $cea80b934e2f5738$export$d2cf3038149dd1b5 as Pill };","map":{"version":3,"mappings":"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","names":["getCloseButtonStyle","$eBAed$css","borderLeft","tokens","gray400","borderTopLeftRadius","borderBottomLeftRadius","padding","spacingXs","minHeight","transition","transitionDurationShort","transitionEasingDefault","transitionDurationDefault","boxShadow","glowMuted","borderLeftColor","gray300","backgroundColor","getLabelStyle","color","gray700","lineHeight","lineHeightM","fontSize","fontSizeM","flexGrow","whiteSpace","textOverflow","overflow","getPillStyle","variant","variantStyle","background","gray200","textDecoration","opacity","display","fontFamily","fontStackPrimary","alignItems","borderRadius","borderRadiusSmall","border","maxWidth","getPillStyles","closeButton","label","icon","fill","gray600","verticalAlign","outline","dragIcon","paddingRight","cursor","pill","Pill","React","forwardRef","props","ref","onClose","testId","onDrag","className","dragHandleComponent","otherProps","styles","textIsTruncated","setTextIsTruncated","useState","trackRefChange","useCallback","scrollWidth","offsetWidth","parentElement","$eBAed$react","$eBAed$cx","$eBAed$DragIcon","$eBAed$Tooltip","content","targetWrapperClassName","isDisabled","$eBAed$Button","type","startIcon","$eBAed$CloseIcon","onClick","displayName"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-pill/dist/packages/components/pill/src/Pill.styles.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-pill/dist/packages/components/pill/src/Pill.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { PillVariants } from './types';\n\nconst getCloseButtonStyle = () => {\n  return css({\n    borderLeft: `1px solid ${tokens.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: tokens.spacingXs,\n    minHeight: 'auto',\n    transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n    opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    '&:focus': {\n      boxShadow: tokens.glowMuted,\n      borderLeftColor: tokens.gray300,\n    },\n    '&:hover, &:focus, &:active': {\n      backgroundColor: tokens.gray300,\n    },\n  });\n};\n\nconst getLabelStyle = () => {\n  return css({\n    color: tokens.gray700,\n    lineHeight: tokens.lineHeightM,\n    padding: tokens.spacingXs,\n    fontSize: tokens.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  });\n};\n\nconst getPillStyle = (variant: PillVariants) => {\n  const variantStyle = (variant: PillVariants) => {\n    switch (variant) {\n      case 'active':\n        return {\n          background: tokens.gray300,\n        };\n      case 'deleted':\n        return {\n          background: tokens.gray200,\n          textDecoration: 'line-through',\n          opacity: '0.5',\n        };\n      default:\n        return {\n          background: tokens.gray200,\n        };\n    }\n  };\n\n  return css({\n    display: 'inline-flex',\n    fontFamily: tokens.fontStackPrimary,\n    alignItems: 'center',\n    borderRadius: tokens.borderRadiusSmall,\n    border: 'none',\n    padding: 0,\n    maxWidth: '100%',\n    ...variantStyle(variant),\n  });\n};\n\nexport function getPillStyles(variant: PillVariants) {\n  return {\n    closeButton: getCloseButtonStyle(),\n    label: getLabelStyle(),\n    icon: css({\n      fill: tokens.gray600,\n      verticalAlign: 'middle',\n      outline: 'none',\n    }),\n    dragIcon: css({\n      padding: tokens.spacingXs,\n      paddingRight: 0,\n      cursor: 'move',\n    }),\n    pill: getPillStyle(variant),\n  };\n}\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { DragIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { PillVariants } from './types';\nimport { getPillStyles } from './Pill.styles';\n\nexport type PillInternalProps = CommonProps & {\n  /**\n   * Text that will be shown on the pill\n   */\n  label: string;\n  /**\n   * Function that handles when the close icon is clicked. Close icon visibility depends on if this property is set.\n   */\n  onClose?: () => void;\n  /**\n   * Function that handles when the pill is dragged. Drag icon visibility depends on if this property is set.\n   */\n  onDrag?: () => void;\n  /**\n   * Custom component to be used as handler for the drag functionality.\n   */\n  dragHandleComponent?: React.ReactNode;\n  /**\n   * Determines style variation of Pill component\n   * @default idle\n   */\n  variant?: PillVariants;\n};\n\nexport type PillProps = PropsWithHTMLElement<PillInternalProps, 'div'>;\n\nexport const Pill = React.forwardRef<HTMLDivElement, ExpandProps<PillProps>>(\n  (props, ref) => {\n    const {\n      label,\n      onClose,\n      testId = 'cf-ui-pill',\n      onDrag,\n      className,\n      dragHandleComponent,\n      variant = 'idle',\n      ...otherProps\n    } = props;\n\n    const styles = getPillStyles(variant);\n    const [textIsTruncated, setTextIsTruncated] = React.useState(false);\n\n    const trackRefChange = React.useCallback(\n      (ref: HTMLDivElement | null) => {\n        if (!ref) {\n          return;\n        }\n        const { scrollWidth, offsetWidth } = ref.parentElement;\n        setTextIsTruncated(scrollWidth > offsetWidth);\n      },\n      [setTextIsTruncated],\n    );\n\n    return (\n      <div\n        className={cx(styles.pill, className)}\n        data-test-id={testId}\n        onDrag={onDrag}\n        ref={ref}\n        {...otherProps}\n      >\n        {onDrag &&\n          (dragHandleComponent ? (\n            dragHandleComponent\n          ) : (\n            <span aria-label=\"Drag handler\" className={styles.dragIcon}>\n              <DragIcon className={styles.icon} variant=\"muted\" />\n            </span>\n          ))}\n        <Tooltip\n          content={label}\n          maxWidth=\"none\"\n          targetWrapperClassName={styles.label}\n          isDisabled={!textIsTruncated}\n        >\n          <span ref={trackRefChange}>{label}</span>\n        </Tooltip>\n        {onClose && (\n          <Button\n            type=\"button\"\n            variant=\"transparent\"\n            startIcon={<CloseIcon aria-label=\"Close\" />}\n            aria-label=\"Close\"\n            onClick={onClose}\n            className={styles.closeButton}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nPill.displayName = 'Pill';\n"]},"metadata":{},"sourceType":"module"}