{"ast":null,"code":"import $fUYts$react from \"react\";\nimport $fUYts$dayjs from \"dayjs\";\nimport $fUYts$dayjspluginutc from \"dayjs/plugin/utc\";\nimport $fUYts$dayjspluginrelativeTime from \"dayjs/plugin/relativeTime\";\nimport $fUYts$dayjsplugincalendar from \"dayjs/plugin/calendar\";\n$fUYts$dayjs.extend($fUYts$dayjspluginutc);\n\nfunction $ee655ad1301c8997$export$de4eb09f10f9c95e(date) {\n  let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'full';\n  let template;\n\n  switch (format) {\n    case 'day':\n      template = 'DD MMM YYYY'; // 17 Aug 2021\n\n      break;\n\n    case 'weekday':\n      template = 'ddd, DD MMM'; // Tue, 17 Aug\n\n      break;\n\n    case 'time':\n      template = 'h:mm A'; // 3:45 PM\n\n      break;\n\n    case 'fullWithSeconds':\n      template = 'ddd, DD MMM YYYY [at] h:mm:ss A'; // Tue, 17 Aug 2021 at 3:45:67 PM\n\n      break;\n\n    default:\n      template = 'ddd, DD MMM YYYY [at] h:mm A';\n  }\n\n  return $fUYts$dayjs(date).format(template);\n}\n\nfunction $ee655ad1301c8997$export$5fb913e47d486079(date) {\n  let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'full';\n  let template;\n\n  switch (format) {\n    case 'day':\n      template = 'YYYY-MM-DD'; // 2019-08-24\n\n      break;\n\n    case 'weekday':\n      template = 'MM-DD'; // 08-24\n\n      break;\n\n    case 'time':\n      template = 'HH:mm:ss.SSS'; // 15:44:07.000\n\n      break;\n\n    default:\n      template = 'YYYY-MM-DDTHH:mm:ss.SSS[Z]';\n  }\n\n  return $fUYts$dayjs(date).utc().format(template);\n}\n\nconst $ee655ad1301c8997$export$3ae94a2503e890a1 = date => {\n  return $ee655ad1301c8997$export$de4eb09f10f9c95e(date, 'day');\n};\n\nconst $ee655ad1301c8997$export$3203edd9e5edd663 = date => {\n  return $ee655ad1301c8997$export$de4eb09f10f9c95e(date, 'time');\n};\n\nconst $ee655ad1301c8997$export$b89623867a65b725 = date => {\n  return $ee655ad1301c8997$export$de4eb09f10f9c95e(date, 'weekday');\n};\n\n$fUYts$dayjs.extend($fUYts$dayjspluginutc);\n$fUYts$dayjs.extend($fUYts$dayjspluginrelativeTime);\n$fUYts$dayjs.extend($fUYts$dayjsplugincalendar);\n\nfunction $162585a33f185f78$export$68534c3ecebfa124(date) {\n  let baseDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  return $fUYts$dayjs(date).from(baseDate);\n}\n\nfunction $162585a33f185f78$export$aa1a2def90bfd930(date) {\n  let baseDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  const isToday = $fUYts$dayjs(date).isSame(baseDate, 'day');\n  if (!isToday) // if the date is not today, we display it with \"Yesterday\", \"Tomorrow\", etc.\n    // and if the date is not in the current week then it will display \"17 Aug 2021\"\n    return $fUYts$dayjs(date).calendar(baseDate, {\n      sameElse: 'DD MMM YYYY'\n    }); // returns \"... ago\"\n\n  return $162585a33f185f78$export$68534c3ecebfa124(date, baseDate);\n}\n\nconst $02aa7794cdab25f9$var$_DateTime = (_ref, ref) => {\n  let {\n    date: date,\n    format = 'full',\n    testId = 'cf-ui-date-time',\n    ...otherProps\n  } = _ref;\n  const machineReadableDate = $ee655ad1301c8997$export$5fb913e47d486079(date);\n  return /*#__PURE__*/$fUYts$react.createElement(\"time\", {\n    dateTime: machineReadableDate,\n    \"data-test-id\": testId,\n    ...otherProps,\n    ref: ref\n  }, $ee655ad1301c8997$export$de4eb09f10f9c95e(date, format));\n};\n\nconst $02aa7794cdab25f9$export$82f9ebd9adeba146 = /*#__PURE__*/$fUYts$react.forwardRef($02aa7794cdab25f9$var$_DateTime);\n$fUYts$dayjs.extend($fUYts$dayjspluginutc);\n$fUYts$dayjs.extend($fUYts$dayjspluginrelativeTime);\n$fUYts$dayjs.extend($fUYts$dayjsplugincalendar);\n\nconst $f5a0093d268a4b59$var$_RelativeDateTime = (_ref2, ref) => {\n  let {\n    date: date,\n    baseDate: baseDate,\n    isRelativeToCurrentWeek = false,\n    testId = 'cf-ui-relative-date-time',\n    ...otherProps\n  } = _ref2;\n  const now = new Date();\n  const referenceDate = baseDate !== null && baseDate !== void 0 ? baseDate : now;\n  const dayjsDate = $fUYts$dayjs(date);\n  const machineReadableDate = $ee655ad1301c8997$export$5fb913e47d486079(date);\n  let relativeDate;\n  if (isRelativeToCurrentWeek && !dayjsDate.isSame(referenceDate, 'day'))\n    /**\n    * if isRelativeToCurrentWeek is true and the date is not today, we display the date with Yesterday, Tomorrow, etc\n    * or, if the date is not in the current week, it displays \"17 Aug 2021\"\n    *\n    * check formatRelativeToCurrentWeekDateTime for more details\n    */\n    relativeDate = $162585a33f185f78$export$aa1a2def90bfd930(date, referenceDate);else // otherwise we display it with \"... ago\" or \"in ...\" notation\n    relativeDate = $162585a33f185f78$export$68534c3ecebfa124(date, referenceDate);\n  return /*#__PURE__*/$fUYts$react.createElement(\"time\", {\n    dateTime: machineReadableDate,\n    \"data-test-id\": testId,\n    ...otherProps,\n    ref: ref\n  }, relativeDate);\n};\n\nconst $f5a0093d268a4b59$export$6de14fd95adb1c8a = /*#__PURE__*/$fUYts$react.forwardRef($f5a0093d268a4b59$var$_RelativeDateTime);\nexport { $02aa7794cdab25f9$export$82f9ebd9adeba146 as DateTime, $f5a0093d268a4b59$export$6de14fd95adb1c8a as RelativeDateTime, $ee655ad1301c8997$export$de4eb09f10f9c95e as formatDateAndTime, $ee655ad1301c8997$export$5fb913e47d486079 as formatMachineReadableDateTime };","map":{"version":3,"mappings":"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","names":["dayjs","extend","utcPlugin","formatDateAndTime","date","format","template","formatMachineReadableDateTime","utc","formatDate","formatTime","formatWeekdayDate","relativeTime","calendarPlugin","formatRelativeDateTime","baseDate","Date","from","formatRelativeToCurrentWeekDateTime","isToday","isSame","calendar","sameElse","_DateTime","ref","testId","otherProps","machineReadableDate","$fUYts$react","dateTime","DateTime","React","forwardRef","_RelativeDateTime","isRelativeToCurrentWeek","now","referenceDate","dayjsDate","relativeDate","RelativeDateTime"],"sources":["/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-datetime/dist/packages/components/datetime/src/utils/formatDateTimeUtils.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-datetime/dist/packages/components/datetime/src/utils/relativeDateTimeUtils.ts","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-datetime/dist/packages/components/datetime/src/DateTime/DateTime.tsx","/Users/brian/Documents/Chonky Media /Website/chonkymedia/chonkymedia/node_modules/@contentful/f36-datetime/dist/packages/components/datetime/src/RelativeDateTime/RelativeDateTime.tsx"],"sourcesContent":["import dayjs from 'dayjs';\nimport utcPlugin from 'dayjs/plugin/utc';\ndayjs.extend(utcPlugin);\n\nimport type { DateType, DateFormat } from '../types';\n\n/**\n * A funtion that will return a formatted date string. The format will dependend on the option\n * passed in the second argument.\n * By default, it will return a string with Forma 36’s \"full\" format (e.g. Tue, 17 Aug 2021 at 3:45 PM)\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} format - the desired format (\"full\", \"day\", \"weekday\", or \"time\")\n * @returns a formatted date\n *\n * @example\n * formatDateAndTime('2021-08-17T15:45:00') // returns \"Tue, 17 Aug 2021 at 3:45 PM\"\n *\n * @example\n * formatDateAndTime('2021-08-17T15:45:00', 'day') // returns \"17 Aug 2021\"\n */\nexport function formatDateAndTime(\n  date: DateType,\n  format: DateFormat = 'full',\n): string {\n  let template: string;\n\n  switch (format) {\n    case 'day':\n      template = 'DD MMM YYYY'; // 17 Aug 2021\n      break;\n    case 'weekday':\n      template = 'ddd, DD MMM'; // Tue, 17 Aug\n      break;\n    case 'time':\n      template = 'h:mm A'; // 3:45 PM\n      break;\n    case 'fullWithSeconds':\n      template = 'ddd, DD MMM YYYY [at] h:mm:ss A'; // Tue, 17 Aug 2021 at 3:45:67 PM\n      break;\n    default:\n      template = 'ddd, DD MMM YYYY [at] h:mm A'; // Tue, 17 Aug 2021 at 3:45 PM\n  }\n\n  return dayjs(date).format(template);\n}\n\n/**\n * A funtion that will return a machine-readable date string that should be passed to the `datetime` attribute of a `<time>` tag\n * By default, it will return a string with \"YYYY-MM-DDTHH:mm:ss.SSS[Z]\" format\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} format - the desired format (\"full\", \"day\", \"weekday\", or \"time\")\n * @returns a formatted date\n *\n * @example\n * formatMachineReadableDateTime(date) // returns 2019-08-13T10:00:00.000Z\n *\n * @example\n * formatMachineReadableDateTime(date, 'day') // returns 2019-08-13\n */\nexport function formatMachineReadableDateTime(\n  date: DateType,\n  format: DateFormat = 'full',\n): string {\n  let template: string;\n\n  switch (format) {\n    case 'day':\n      template = 'YYYY-MM-DD'; // 2019-08-24\n      break;\n    case 'weekday':\n      template = 'MM-DD'; // 08-24\n      break;\n    case 'time':\n      template = 'HH:mm:ss.SSS'; // 15:44:07.000\n      break;\n    default:\n      template = 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'; // 2019-08-24T15:44:07.000Z\n  }\n\n  return dayjs(date).utc().format(template);\n}\n\n/**\n * @example\n * > formatDate(date)\n * 13 Aug 2019\n */\nexport const formatDate = (date: DateType): string => {\n  return formatDateAndTime(date, 'day');\n};\n\n/**\n * @example\n * > formatTime(date)\n * 8:00 AM\n */\nexport const formatTime = (date: DateType): string => {\n  return formatDateAndTime(date, 'time');\n};\n\n/**\n * @example\n * > formatWeekdayDate(date)\n * Mon, 12 Aug\n */\nexport const formatWeekdayDate = (date: DateType): string => {\n  return formatDateAndTime(date, 'weekday');\n};\n","import dayjs from 'dayjs';\nimport utcPlugin from 'dayjs/plugin/utc';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport calendarPlugin from 'dayjs/plugin/calendar';\ndayjs.extend(utcPlugin);\ndayjs.extend(relativeTime);\ndayjs.extend(calendarPlugin);\n\nimport type { DateType } from '../types';\n\n/**\n * A function that will return a string with how far a given date is in the past or future,\n * using a baseDate as reference. If the baseDate is not passed, the function will use today as reference.\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} baseDate - the date that should be used as a reference (default is \"today\")\n * @returns a relative date\n *\n * @example\n * // Considering today as 18.08.2021\n * formatRelativeDateTime('2021-08-17T15:45:00') // returns \"a day ago\"\n *\n * @example\n * formatRelativeDateTime('2021-08-17T15:45:00', '2021-08-16') // returns \"in a day\"\n */\nexport function formatRelativeDateTime(\n  date: DateType,\n  baseDate: DateType = new Date(),\n) {\n  return dayjs(date).from(baseDate);\n}\n\n/**\n * A function that formats a date relative to Today or to the `baseDate` if passed.\n * If the date is not today, it will return a string with \"Yesterday ...\", \"Tomorrow ...\", etc\n * If the date is not in the current week, it return a string with \"DD MMM YYYY\" format\n * If the date is today, it will return a string with \"... ago\" or \"in ...\"\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} baseDate - the date that should be used as a reference (default is \"today\")\n * @returns a relative date\n *\n * @example\n * // Considering today as 18.08.2021\n * formatRelativeToCurrentWeekDateTime('2021-08-17T15:45:00') // returns \"Yesterday at 3:45 PM\"\n *\n * @example\n * formatRelativeToCurrentWeekDateTime('2021-08-17T15:45:00', '2021-08-16') // returns \"Tomorrow at 3:45 PM\"\n */\nexport function formatRelativeToCurrentWeekDateTime(\n  date: DateType,\n  baseDate: DateType = new Date(),\n) {\n  const isToday = dayjs(date).isSame(baseDate, 'day');\n\n  if (!isToday) {\n    // if the date is not today, we display it with \"Yesterday\", \"Tomorrow\", etc.\n    // and if the date is not in the current week then it will display \"17 Aug 2021\"\n    return dayjs(date).calendar(baseDate, {\n      sameElse: 'DD MMM YYYY',\n    });\n  }\n\n  // returns \"... ago\"\n  return formatRelativeDateTime(date, baseDate);\n}\n","import React from 'react';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nimport type { DateType, DateFormat } from '../types';\nimport { formatDateAndTime, formatMachineReadableDateTime } from '../utils';\n\ninterface DateTimeOwnProps extends CommonProps {\n  /**\n   * The date that will be displayed. It accepts a JS Date, an ISO8601 Timestamp string, or Unix Epoch Milliseconds number\n   */\n  date: DateType;\n  /**\n   * The format in which the date will be presented\n   *\n   * @default full\n   **/\n  format?: DateFormat;\n}\n\nexport type DateTimeProps = PropsWithHTMLElement<DateTimeOwnProps, 'time'>;\n\nconst _DateTime = (\n  {\n    date,\n    format = 'full',\n    testId = 'cf-ui-date-time',\n    ...otherProps\n  }: ExpandProps<DateTimeProps>,\n  ref: React.Ref<HTMLTimeElement>,\n) => {\n  const machineReadableDate = formatMachineReadableDateTime(date);\n\n  return (\n    <time\n      dateTime={machineReadableDate}\n      data-test-id={testId}\n      {...otherProps}\n      ref={ref}\n    >\n      {formatDateAndTime(date, format)}\n    </time>\n  );\n};\n\n/**\n * The DateTime component will format a date to a human friendly format and wrap it in a `<time>` tag\n */\nexport const DateTime = React.forwardRef(_DateTime);\n","import React from 'react';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nimport dayjs from 'dayjs';\nimport utcPlugin from 'dayjs/plugin/utc';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport calendarPlugin from 'dayjs/plugin/calendar';\ndayjs.extend(utcPlugin);\ndayjs.extend(relativeTime);\ndayjs.extend(calendarPlugin);\n\nimport type { DateType } from '../types';\nimport {\n  formatMachineReadableDateTime,\n  formatRelativeDateTime,\n  formatRelativeToCurrentWeekDateTime,\n} from '../utils';\n\ninterface RelativeDateTimeInternalProps extends CommonProps {\n  /**\n   * The date that will be displayed. It accepts a JS Date, an ISO8601 Timestamp string, or Unix Epoch Milliseconds number\n   */\n  date: DateType;\n  /**\n   * If a value is passed to baseDate, then the component will compare both dates and return the time between them.\n   * If no value is passed then the date will be compared to \"now\"\n   *\n   * @default \"Now\"\n   */\n  baseDate?: DateType;\n  /**\n   * Sets the date to be relative only if it is in the current week\n   * @default false\n   */\n  isRelativeToCurrentWeek?: boolean;\n}\n\nexport type RelativeDateTimeProps = PropsWithHTMLElement<\n  RelativeDateTimeInternalProps,\n  'time'\n>;\n\nconst _RelativeDateTime = (\n  {\n    date,\n    baseDate,\n    isRelativeToCurrentWeek = false,\n    testId = 'cf-ui-relative-date-time',\n    ...otherProps\n  }: ExpandProps<RelativeDateTimeProps>,\n  ref: React.Ref<HTMLTimeElement>,\n) => {\n  const now = new Date();\n  const referenceDate = baseDate ?? now;\n  const dayjsDate = dayjs(date);\n  const machineReadableDate = formatMachineReadableDateTime(date);\n\n  let relativeDate: string;\n\n  if (isRelativeToCurrentWeek && !dayjsDate.isSame(referenceDate, 'day')) {\n    /**\n     * if isRelativeToCurrentWeek is true and the date is not today, we display the date with Yesterday, Tomorrow, etc\n     * or, if the date is not in the current week, it displays \"17 Aug 2021\"\n     *\n     * check formatRelativeToCurrentWeekDateTime for more details\n     */\n    relativeDate = formatRelativeToCurrentWeekDateTime(date, referenceDate);\n  } else {\n    // otherwise we display it with \"... ago\" or \"in ...\" notation\n    relativeDate = formatRelativeDateTime(date, referenceDate);\n  }\n\n  return (\n    <time\n      dateTime={machineReadableDate}\n      data-test-id={testId}\n      {...otherProps}\n      ref={ref}\n    >\n      {relativeDate}\n    </time>\n  );\n};\n\n/**\n * The RelativeDateTime will show a `date` relative to \"now\" or to the `baseDate`\n * (e.g. in a day, in one month, one month ago, etc).\n */\nexport const RelativeDateTime = React.forwardRef(_RelativeDateTime);\n"]},"metadata":{},"sourceType":"module"}