'use strict';

var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".brand-animation-wraper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center; }\n  .brand-animation-wraper .item {\n    width: 100px;\n    cursor: pointer;\n    padding: 10px;\n    flex-shrink: 0; }\n    .brand-animation-wraper .item .iitem {\n      width: 100%;\n      transition-property: all;\n      text-align: center;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      color: black;\n      font-size: 10px; }\n    .brand-animation-wraper .item img {\n      width: 100%; }\n  .brand-animation-wraper .hide-scale .iitem {\n    transform: scale(0); }\n  .brand-animation-wraper .show-scale .iitem {\n    transform: scale(1); }\n  .brand-animation-wraper .hide-fade .iitem {\n    opacity: 0; }\n  .brand-animation-wraper .show-fade .iitem {\n    opacity: 1; }\n";
styleInject(css_248z);

var Item = function (props) {
    var image = props.image;
    var _a = __read(React.useState(false), 2), show = _a[0], setShow = _a[1];
    var _b = __read(React.useState(props.image), 2), imageStste = _b[0], setImageState = _b[1];
    var transitionType = props.transitionType;
    var getTreansitionTypeClasse = React.useMemo(function () {
        return function (type) {
            switch (transitionType) {
                case "FADE":
                    return type + "-fade";
                case "SCALE":
                    return type + "-scale";
                case "NONE":
                    return "";
                default:
                    return type + "-fade " + type + "-scale";
            }
        };
    }, [transitionType]);
    React.useEffect(function () {
        setShow(false);
        setTimeout(function () {
            setImageState(image);
            setShow(true);
        }, props.transitionDuration);
    }, [image, props.transitionDuration]);
    return (React__default['default'].createElement("div", { className: show
            ? "item " + getTreansitionTypeClasse("show")
            : "item " + getTreansitionTypeClasse("hide") }, typeof props.image === "string" ? (React__default['default'].createElement("div", { className: "iitem", style: { transitionDuration: props.transitionDuration + "ms" }, onClick: function () {
            console.log("ok string image");
        } },
        React__default['default'].createElement("img", { src: typeof imageStste === "string" ? imageStste : imageStste.image, alt: "", className: props.imageClass }))) : (React__default['default'].createElement("div", { className: "iitem", style: { transitionDuration: props.transitionDuration + "ms" }, onClick: function () {
            if (props.onClick)
                props.onClick(props.image);
        } },
        props.image.topText && props.image.topText,
        React__default['default'].createElement("img", { src: typeof imageStste === "string" ? imageStste : imageStste.image, alt: "", className: props.image.imageClass }),
        props.image.topText && props.image.buttomText))));
};

var noop = function () { };
function useInterval(callback, interval, _a) {
    if (interval === void 0) { interval = 1000; }
    var _b = _a === void 0 ? {} : _a, _c = _b.onFinish, onFinish = _c === void 0 ? noop : _c, _d = _b.autoStart, autoStart = _d === void 0 ? true : _d, _e = _b.immediate, immediate = _e === void 0 ? false : _e, _f = _b.selfCorrecting, selfCorrecting = _f === void 0 ? true : _f;
    var timer = React.useRef();
    var active = React.useRef(false);
    var expected = React.useRef(null);
    var savedCallback = React.useRef(callback);
    var tick = React.useCallback(function () {
        /* istanbul ignore next */
        var expectedTimestamp = expected.current || 0;
        if (selfCorrecting) {
            var delay = Date.now() - expectedTimestamp;
            var ticks = 1 + (delay > 0 ? Math.floor(delay / interval) : 0);
            expected.current = expectedTimestamp + interval * ticks;
            set(Math.max(interval - delay, 1));
            savedCallback.current(ticks);
        }
        else {
            set(interval);
            savedCallback.current();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [interval]);
    var set = React.useCallback(function (ms) {
        if (timer.current !== undefined) {
            clearTimeout(timer.current);
        }
        if (active.current) {
            timer.current = setTimeout(tick, ms);
        }
        else {
            console.debug("Trying to set interval timeout on inactive timer, this is no-op and probably indicates bug in your code.");
        }
    }, [tick, active]);
    var start = React.useCallback(function () {
        var isActive = active.current;
        active.current = true;
        if (expected.current === null) {
            expected.current = Date.now() + interval;
        }
        if (immediate && !isActive) {
            expected.current -= interval;
            tick();
        }
        set(interval);
    }, [tick, interval, immediate, set]);
    var stop = React.useCallback(function (triggerFinish) {
        if (triggerFinish === void 0) { triggerFinish = true; }
        var isActive = active.current;
        if (timer.current !== undefined) {
            clearTimeout(timer.current);
        }
        active.current = false;
        timer.current = undefined;
        expected.current = null;
        if (isActive && triggerFinish) {
            onFinish();
        }
    }, [onFinish]);
    var isActive = React.useCallback(function () { return active.current; }, []);
    React.useEffect(function () {
        savedCallback.current = callback;
    }, [callback]);
    React.useEffect(function () {
        autoStart && start();
        return stop;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return { start: start, stop: stop, isActive: isActive };
}

var ImageGrid = function (props) {
    var _a = __read(React.useState([]), 2), visibles = _a[0], setVisibles = _a[1];
    var _b = __read(React.useState([]), 2), invisibles = _b[0], setInvisibles = _b[1];
    var isActiveProp = props.isActive;
    React.useEffect(function () {
        var items = props.images.map(function (image, index) {
            if (typeof image === "string") {
                console.log("string");
                return {
                    id: "none",
                    image: image,
                    topText: React__default['default'].createElement(React__default['default'].Fragment, null),
                    buttomText: React__default['default'].createElement(React__default['default'].Fragment, null),
                };
            }
            else if (typeof image === "object") {
                return image;
            }
            return {
                id: "none",
                image: image,
                topText: React__default['default'].createElement(React__default['default'].Fragment, null),
                buttomText: React__default['default'].createElement(React__default['default'].Fragment, null),
            };
        });
        var invs = [];
        var vs = [];
        var t_vc = 0;
        if (props.visibleCount >= items.length) {
            t_vc = items.length - 1;
        }
        else {
            t_vc = props.visibleCount;
        }
        items.forEach(function (item) {
            if (vs.length >= t_vc) {
                invs.push(item);
            }
            else {
                vs.push(item);
            }
        });
        setVisibles(vs);
        setInvisibles(invs);
    }, [props.images, props.visibleCount]);
    var _c = useInterval(function () {
        var _a;
        var t_vc = 0;
        if (props.visibleCount >= props.images.length) {
            t_vc = props.images.length - 1;
        }
        else {
            t_vc = props.visibleCount;
        }
        if (visibles.length === t_vc) {
            var tc = props.images.length;
            var vc = t_vc;
            vc = (vc + (vc % 2)) / 2;
            var ic = tc - t_vc;
            var mxc = vc < ic ? vc : ic;
            var oneTimeCount = props.animationItemcount === 0
                ? Math.abs(Math.floor(Math.random() * mxc) + 1)
                : (props.animationItemcount ||
                    props.images.length - t_vc) > mxc
                    ? mxc
                    : props.animationItemcount ||
                        props.images.length - t_vc;
            var r_array01 = shuffleArray(__spread(Array(visibles.length).keys())), r_array02 = shuffleArray(__spread(Array(invisibles.length).keys()));
            r_array01 =
                Math.random() < 0.5
                    ? r_array01.filter(function (n) { return n % 2 === 0; })
                    : r_array01.filter(function (n) { return n % 2 === 1; });
            for (var i = 0; i < (oneTimeCount > r_array01.length ? r_array01.length : oneTimeCount); i++)
                _a = __read([
                    invisibles[r_array02[i]],
                    visibles[r_array01[i]],
                ], 2), visibles[r_array01[i]] = _a[0], invisibles[r_array02[i]] = _a[1];
            setVisibles(__spread(visibles));
            setInvisibles(__spread(invisibles));
        }
    }, props.interval), start = _c.start, stop = _c.stop;
    React.useEffect(function () {
        if (isActiveProp) {
            start();
        }
        else {
            stop();
        }
    }, [isActiveProp, start, stop]);
    var shuffleArray = function (array) {
        var _a;
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            _a = __read([array[j], array[i]], 2), array[i] = _a[0], array[j] = _a[1];
        }
        return array;
    };
    return (React__default['default'].createElement("div", null,
        React__default['default'].createElement("div", { className: "brand-animation-wraper" }, visibles.map(function (item, index) { return (React__default['default'].createElement(Item, { transitionDuration: props.transitionDuration, key: index, image: item, id: item.id, onClick: function (id) {
                if (props.onItemClick)
                    props.onItemClick(item);
            }, transitionType: props.transitionType || "FADE_AND_SCALE", imageClass: props.imageClass })); }))));
};

module.exports = ImageGrid;
//# sourceMappingURL=index.js.map
